- 简介 -

- 起源
    - 2005年发布，采用Python语言编写的开源文本框架
    - 早期Django主做新闻和内容管理
    - 重量级的Python Web框架，Django配备了常用的大部分组件
- 组件
    - 基本配置文件/路由系统
    - 模型层(M)/模板层(T)/视图层(V)
    - Cookies和Session
    - 分页及发邮件
    - Admin管理后台
- 用途
    - 网站/微信公众号/小程序后端开发
    - 人工智能平台融合
- 版本
    - 当前笔记版本: 2.2.12。支持的Python版本: 3.5, 3.6, 3.7, 3.8
- 网站
    - Django官网: http://www.djangoproject.com
    - Django中文文档参考网站: https://yiyibooks.cn/

- 安装 -

- windows
    - pip3 install django==2.2.12
    - 检查是否安装成功
        - pip3 freeze | find /I "Django"
- ubuntu
    - 在线安装
        - sudo pip3 install django==2.2.12
    - 离线安装
        - 将安装包复制到虚拟机
        - 解压缩: tar -xvf Django-2.2.12.tar.gz
        - 进入目录: cd Django-2.2.12
        - 执行安装: sudo python3 setup.py install
    - 检查是否安装成功
        - sudo pip3 freeze | grep -i "Django"

- 使用 -

- 脱坑
    - 浏览器有跨域限制

- 创建项目
    - django-admin startproject 项目名
- 启动服务
    - 测试开发阶段的启动方式
        - 终端cd到项目文件夹，例如cd mysite1
        - 进入到项目文件夹后，执行python3 manage.py runserver启动Django服务
        -- 注：该启动方式下，Django在前台启动服务，默认监听端口：8000
        - 浏览器访问http://127.0.0.1:8000可看到Django的启动页面
        -- 注：如果想更换端口，可以使用python3 manage.py runserver 端口号
- 关闭服务
    - 方式一：在runserver启动终端下
        - 执行：Ctrl+C
    - 方式二：在其他终端下
        - 执行：sudo lsof -i:8000 查询出Django的进程id
        - 执行：kill -9对应Django进程id
- 项目结构
    - manage.py 包含项目管理的子命令，如：
        - python3 manage.py runserver 启动服务
        - python3 manage.py startapp 创建应用
        - python3 manage.py migrate 数据库迁移
        - ...
        - 直接执行python3 manage.py可列出Django的所有子命令
    - 项目同名文件夹：mysite1/mysite1
        - __init__: Python包的初始化文件
        - wsgi.py: WEB服务网关的配置文件(Django正启动时需要用到)
        - urls.py: 项目的主路由配置(HTTP请求进入Django时优先调用该文件)
        - settings.py: 项目的配置文件(包含项目启动时需要的配置)
    - settings.py
        - settings.py包含了Django项目启动的所有配置项
        - 配置项分为 公有配置 和 自定义配置
        - 项目绝对路径：BASE_DIR = 'xxx'
        - 启用调试模式：DEBUG = True
        - 公有配置(Django官方提供的基础配置 https://docs.djangoproject.com/en/2.2/ref/settingss/)
            - ALLOWED_HOSTS(设置允许访问到本项目的host头值)
                - [],表示只有请求头中host为127.0.0.1和localhost能访问本项目，DEBUG = True时有效
                - ['*'],表示任何请求头的host都能访问到当前项目
                - 如果要在局域网其他主机也能访问此主机的Django服务，启动方式如下
                    - python3 manage.py runserver 0.0.0.0:5000
                    - 指定网络设备如果内网环境下其他主机想正常访问该站点，需加ALLOWED_HOSTS=['内网ip']
            - 语言配置
                - 英文
                    - LANGUAGE_CODE = 'en-us'
                - 中文
                    - LANGUAGE_CODE = 'zh-Hans'
            - 时区
                - 世界标准时间(格林)
                    - TIME_ZONE = 'UTC'
                - 中国时区(东巴)
                    - TIME_ZONE = 'Asia/Shanghai'
        - 自定义配置
            - 变量名大写，且尽量个性化，以防覆盖公有配置，如：SQL_PORT = 3306
- 路由配置
    - settings.py中的ROOT_URLCONF指定了主路由配置列表urlpatterns的文件位置
    - file: 项目同名文件夹下/urls.py
        -s-
        urlpatterns = [
            # 127.0.0.1:8000/page/2021
            path('page/2021/', views.page_2021),
            ...(此处配置主路由)
        ]
        -e-
    - path
        - 导入
            - from django.urls import path
        - 语法
            - path(route, views, name=None)
        - 参数
            - route:字符串类型，匹配的请求路径
            - views:指定路径所对应的视图处理函数的名称
            - name:为地址起别名，在模板中地址反向解析时用
        - 转换器
            - str    匹配除了'/'之外的非空字符串
            - int    匹配0或任何正整数，返回一个int
            - slug   匹配任意由ASCII字母或数字以及连字符(-)和下划线组成的短标签
            - path   匹配非空字段，包括路径分隔符'/'
            - 使用样例
                - user/<str:name>        user/huoyijun   视图函数参数name=huoyijun
                - user/<int:age>         user/25         视图函数参数age=25
                - user/<slug:time>       user/2021-06-22 视图函数参数time=2021-06-22
                - user/<path:infoPath>   user/info/other 视图函数参数infoPath=info/other
    - re_path
        - 导入
            - from django.urls import re_path
        - 语法
            - path(route, views, name=None)
        - 参数
            - route:Python版的正则(?P<arg>exp)
                -s-
                re_path('^huoyijun/(?P<Y>\d{4})/(?P<m>\d{1,2})/(?P<d>\d{1,2})$', views.huoyijun_time)
                -e-
- 请求中的方法
    - HTTP1.0最常用的三种请求方法：GET,POST和HEAD
    - HTTP1.1新增了五种请求方法：OPTIONS,PUT,DELETE,TRACE和CONNECT方法
        - PUT       从客户端向服务器传送的数据取代指定的文档的内容
        - DELETE    请求服务器删除指定的页面
        - CONNECT   HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器
        - OPTIONS   允许客户端查看服务器性能
        - TRACE     回显服务器收到的请求，主要用于测试或诊断
- Django中的请求
    - 请求在Django中实则就是视图函数的第一个参数，即HttpRequest对象
    - Django接收到http协议的请求后，会根据请求数据报文创建HttpRequest对象
    - HttpRequest对象通过属性描述了请求的所有相关信息
    
    - path_info  # URL字符串
    - method  # 字符串，表示HTTP请求方法，常用值：GET,POST
    - GET: QueryDict查询字典的对象，包含get请求方式的所有数据
    - POST: QueryDict查询字典的对象，包含post请求方式的所有数据
    - FILES: 类似于字典的对象，包含所有的上传文件信息
    - COOKIES: Python字典，包含所有的cookie，键和值都为字符串
    - session: 似于字典的对象，表示当前回话
    - body: 字符串，请求体的内容（POST或PUT）
    - scheme: 请求协议（http/https）
    - request.get_full_path(): 请求的完整路径
    - request.META: 请求中的元数据（消息头）
        - request.META['REMOTE_ADDR']: 客户端IP地址
- HttpResponse子类
    - HttpResponseRedirect        重定向        302
    - HttpResponseNotModified     未修改        304
    - HttpResponseBadRequest      错误请求      400
    - HttpResponseNotFound      没有对应的资源  404
    - HttpResponseForbidden       请求被禁止    403
    - HttpResponseServerError     服务器错误    500
- GET处理
    - request.GET['参数名']  # QueryDict
    - request.GET.get('参数名', '默认值')
    - request.GET.getlist('参数名')
- POST处理
    - request.POST['参数名']  # request.POST 绑定QueryDict
    - request.POST.get('参数名', '默认值')
    - request.POST.getlist('参数名')
    - *注：取消csrf验证，否则Django将会拒绝客户端发来的POST请求，报403响应
        - 取消csrf验证
            - 注掉settings.py中MIDDLEWARE中的CsrfViewMiddleWare的中间件
- Django的设计模式及模板层
    - Django的设计模式是MTV(Module Template View),实质上是MTVC
        - 其他如JAVA的框架用的是MVC模式(Moudle View Control)
    - 模板配置
        - 在项目文件右键创建templates文件夹
        - 在settings.py中TEMPLATES配置项
            - BACKEND: 指定模板的引擎
            - DIRS: 模板的搜索目录（可以是一个或多个）
            - APP_DIRS: 是否要在应用中的templates文件夹中搜索模板文件
            - OPTIONS: 有关模板的选项
        - 配置项中需要修改的部分
            - 设置DIRS: 'DIRS': [os.path.join(BASE_DIR, 'templates')]
    - 模板的加载方式
        - 方案一：通过loader获取模板，通过HttpResponse进行响应在视图函数中
            -s-
            from django.template import loader
            # 1.通过loader加载模板
            t = loader.get_template("模板文件名")
            # 2.将t换成HTML字符串
            html = t.render(字典数据)
            # 3.用响应对象将转换的字符串内容返回给浏览器
            return HttpResponse(html)
            -e-
        - 方案二：
            -s-
            from django.shortcuts import render
            return render(request, "模板文件名", 字典数据)
            -e-
    - 模板的变量
        - {{ 变量名 }}
        - {{ 变量名.index }}
        - {{ 变量名.key }}
        - {{ 对象.方法 }}
        - {{ 函数名 }}
    - 模板标签
        - 标签语法
            -s-
            {% 标签 %}
            ...
            {% 结束标签 %}
            -e-
        - if 标签
            - 语法
                -s-
                {% if 条件表达式1 %}
                ...
                {% elif 条件表达式2 %}
                ...
                {% else %}
                ...
                {% endif %}
                -e-
            - 注意
                - if条件表达式里可以用的运算符: ==, !=, <, >, <=, >=, in, not in, is, is not, not, and, or
                - 在if标记中使用实际括号是无效的语法。如果需要指示优先级，应使用嵌套的if标记。
        - for标签
            - 语法
                -s-
                {% for 变量 in 可迭代对象 %}
                    ...循环语句
                {% empty %}
                    ...可迭代对象无数据时填充的语句
                {% endfor %}
                -e-
            - 内置变量: forloop
                - forloop.counter        循环的当前迭代（从1开始索引）
                - forloop.counter0       循环的当前迭代（从0开始索引）
                - forloop.recounter      counter值的倒序
                - forloop.recounter0     revcounter值的倒序
                - forloop.first          如果这是第一次通过循环，则为真
                - forloop.last           如果这是最后一次循环，则为真
                - forloop.parentloop     当嵌套循环，parentloop表示外层循环
    - 模板过滤器
        - 定义
            - 在变量输出时对变量的值进行处理
        - 作用
            - 可以通过使用过滤器来改变变量的输出显示
        - 语法
            - {{ 变量 | 过滤器1: '参数值1' | 过滤器2: '参数值2' }}
        - 常用过滤器
            - lower  # 将字符串转换为全部小写
            - upper  # 将字符串转换为大写形式
            - safe  # 默认不对变量内的字符串进行html转义
            - add: "n"  # 将value的值增加n
            - truncatechars: "n"  # 如果字符串字符多余指定的字符数量，那么会被
            截断，截断的字符换将以翻译的省略号序列("...")结尾。
            - ...
            
            - 例子
                -s-
                <p>给一个int数据加2 {{int|add:"2"}}</p>
                <p>将字符串数据大写 {{str|upper}}</p>
                <p>不转义所给的参数 {{a_script|safe}}</p>
                -e-
    - 模板层：继承
        - 模板继承可以使父模板的内容重用，子模版直接继承父模板的全部内容并可以
        覆盖父模板中相应的块
        - 语法：父模板中
            - 定义父模板中的块block标签
            - 标识出哪些在子模版中是允许被修改的
            - block标签: 在父模板中定义，可以在子模版中覆盖
                -s-
                {% block block_name %}
                ...
                {% endblock block_name %}
                -e-
        - 语法：子模版中
            - 继承模板extends标签（写在模板文件的第一行）
                - 例如: {% entends "base.html" %}
            - 子模版 重写父模板中的内容快
                -s-
                {% block block_name %}
                子模版块用来覆盖父模板中 block_name 块的内容
                {% endlock block_name %}
                -e-
    - url反向解析
        - url反向解析是指在视图或模板中，用path定义的名称来动态查找或计算出响应的路由
        - path函数的语法
            - path(route, views, name="别名")
            - path('page', views.page_view, name="page_url")
        - 模板中的使用
            -s-
            {% url '别名' %}
            {% url '别名' '参数值1' '参数值2' %}
            ex:
            {% url 'pagen' '300' %}
            {% url 'person' name='ex' age='18' %}
            -e-
        - 视图函数中的使用
            -s-
            from django.urls import reverse
            reverse('别名', args=[], kwargs={})
            ex:
            print(reverse('pagen', args=[300]))
            print(reverse('person', kwargs={'name':'huoyijun', age:'18'}))
            -e-
- 静态文件
    - 配置settings.py
        -s-
        STATIC_URL = '/static/'  # 网址中有该路径django就会自动到STATICFILES_DIRS中查找静态文件
        STATICFILES_DIRS = (
            os.join.path(BASE_DIR, 'static'),  # 注意是个元组
        )
        -e-
    - 根目录创建一个static文件夹，里面放静态文件
    - 栗子test_static.html
        -s-
        <img src="http://127.0.0.1:8000/static/image/JSUseStrict.jpg" width="200px" height="200px">  <!-- 绝对路径 -->
        <img src="/static/image/JSUseStrict.jpg" width="200px" height="200px">  <!-- 相对路径 -->
        {% load static %}
        <img src="{% static 'image/JSUseStrict.jpg' %}" width="200px" height="200px">  <!-- 动态加载，推荐使用 -->
        -e-
- 应用及分布式路由
    - 应用在Django项目中是一个独立的业务模块，可以包含自己的路由，视图，模板，模型
    - 创建应用
        - 用manage.py中的子命令startapp创建应用文件夹
            - python3 manage.py startapp music
        - 在settings.py的INSTALLED_APPS列表中配置安装此应用
            -s-
            INSTALLED_APPS = [
            'music',  # 音乐模块
            'video'  # 视频模块
            ]
            -e-
    - 配置分布式路由
        -s-
        # 主路由中
        from django.urls import path, include
        from . import views
        
        urlpatterns = [
            path('admin/', admin.site.urls),
            path('music/', include('music.urls')
        ]
        -e-
        - 手动在music目录下创建urls.py文件，其内容结构同主路由
        - 注意：在给应用配置path时只需写"music/"之后的路径
    - 应用下的模板
        - 应用下手动创建templates文件夹
        - settings.py中开启应用模板功能
            - TEMPLATE配置项中的'APP_DIRS'值为True即可
        - 应用下templates和外层templates都存在时，django得查找模板规则
            - 优先查找外层templates目录下的模板
            - 按INSTALLED_APPS配置下的应用顺序逐层查找
            
            - 解决模板查找问题
                - 应用的templates文件夹下创建一个嵌套且不与其他应用重名
                的文件夹，在该文件夹下存放模板且视图函数返回模板时修改成
                相应路径即可。
- 模型层及ORM
    - 模型层与数据库打交道，需要先安装mysqlclient[版本1.3.13以上]
    - 安装前确认Ubuntu是否已安装python3-dev和default-libmysqlclient-dev,
    其实python的mysqlclient就是调用C语言编写的default-libmysqlclient-dev
    来实现操作mysql数据库的。
        - sudo apt list --install | grep -E "libmysqlclient-dev|python3-dev"
        - 若未找到相应结果则：sudo apt-get install python3-dev default-libmysqlclient-dev
        - sudo pip3 install mysqlclient
    - Django配置mysql
        - 手动创建数据库
            - create database 数据库名 default charset utf8
            - 通常数据库名跟项目名保持一致
        - settings.py里进行数据库的配置
            - 修改DATABASES配置项的内容，由sqlite3变成mysql
                -s-
                DATABASES = {
                    'default': {
                        'ENGINE': 'django.db.backends.mysql',
                        'NAME': 'mysite2',  # 数据库名
                        'HOST': '127.0.0.1',
                        'PORT': 3306,
                        'USER': 'root',
                        'PASSWORD': 123456,
                    }
                }
                -e-
    - 什么是模型
        - 模型是一个python类，它是由django.db.models.Model派生出的子类
        - 一个模型类代表数据库中的一张数据表
        - 模型类中每一个类属性都代表数据库中的一个字段
        - 模型是数据交互的接口，是表示和操作数据库的方法和方式
    - ORM框架
        - 定义
            -s-
            ORM(Object Relational Mapping)即对象关系映射，它是一种给程序技术，
            他允许你使用类对象对数据库进行操作，从而避免通过SQL语句操作数据库
            -e-
        - 作用
            - 建立模型类和表之间的对应关系，允许我们通过面向对象的方式来操作数据库
            - 根据设计的模型类生成数据库中的表格
            - 通过简单的配置就可以进行数据库的切换
        - 优点
            - 只需要面向对象编程，不需要面向数据库编写代码
                - 对数据库的操作都转化成对类属性和方法的操作
                - 不用编写各种数据库的sql语句
            - 实现数据模型与数据库的解耦，屏蔽了不同数据库操作上的差异
                - 不再关注用的是mysql、oracle等数据库的内部细节
                - 通过简单的配置就可以轻松更换数据库，而不需要修改代码
        - 缺点
            - 对于复杂业务，使用成本较高
            - 根据对象的操作转换成sql语句，根据查询的结果转化成对象，在映射过程中有性能损失
        - 映射关系
            ORM         DB
            类    <->  数据表
            对象  <->  数据行
            属性  <->  字段
        - 模型类代码示例：models.py中
            -s-
            from django.db import models
            
            class Book(models.Model):
                title = models.CharField("书名", max_length=50, default="")
                price = models.DecimalField("定价", max_digits=7, decimal_places=2, default=0.0)
            -e-
        - 数据库迁移
            - 迁移是Django同步模型所做更改（添加字段，删除模型等）到数据库模式的方法
                - python3 manage.py makemigrations  # 生成迁移文件，将应用下的models.py
                文件生成一个中间文件，并保存在migrations文件夹中
                - python3 manage.py migrate  # 执行迁移脚本程序，将每个应用下的migrations
                目录中的中间文件同步回数据库
        - 创建模型类流程（回顾）
            - 创建应用
            - 在应用的models.py中编写模型类
                -s-
                from django.db import models
                class 模型类名(models.Model):
                    字段名 = models.字段类型(字段选项)
                -e-
            - 迁移同步 makemigrations && migrate
    - ORM基础字段及选项1
        - BooleanField()
            - 数据库类型：tinyint(1)
            - 编程语言中：使用True或False来表示值
            - 在数据库中：使用1或0来表示具体的值
        - CharField()
            - 数据库类型：varchar
            - 注意：必须要指定max_length参数值
        - DateField()
            - 数据库类型：date
            - 作用：表示日期
            - 参数
                - auto_now: 每次保存对象时，自动设置该字段为当前时间(取值：True/False)
                - auto_now_add: 当前对象第一次被创建时自动设置当前时间(取值：True/False)
                - default: 设置当前时间(取值：字符串格式时间如：'2021-8-16')
                - 以上三个参数只能多选一
        - DateTimeField()
            - 数据库类型：datetime(6)
            - 作用：表示日期和时间
            - 参数同DateField
        - FloatField()
            - 数据库类型：double
            - 编程语言和数据库中都使用小数表示值
        - DecimalField()
            - 数据库类型：decimal(x,y)
            - 编程语言中：使用小数表示该列的值
            - 在数据库中：使用小数
            - 参数
                - max_digits: 位数总数，包括小数点后的位数。该值必须大于等于decimal_places
                - decimal_places: 小数点后的数字位数
        - EmailField()
            - 数据库类型：varchar
            - 编程语言和数据库中使用字符串
            - 原理
                - 存的也是varchar字符串，只是在存值的时候用正则检查了值是否为邮箱格式
        - IntegerField()
            - 数据库类型：int
            - 编程语言和数据库中使用整数
        - ImageField()
            - 数据库类型：varchar(100)
            - 作用：在数据库中保存图片的路径
            - 编程语言和数据库中使用字符串
        - TextField()
            - 数据库类型：longtext
            - 作用：表示不定长的字符数据
        - 更多参阅：https://docs.djangoproject.com/en/2.2/ref/models/fields/#field-types
    - ORM基础字段及选项2
        - 字段选项，指定创建的列的额外信息
        - 允许出现多个字段选项，多个选项之间使用","隔开
        - primary_key
            - 如果设置为True,表示该列为主键，如果指定一个字段为主键，则此数据表不会
            创建id字段
        - blank
            设置为True时，admin后台提交该字段时可以为空，为False时必须填写。它与
            mysql的null级别的空是两回事。
        - null
            - 如果设置为True，表示该列值允许为空
            - 默认为False，如果此选项为False，建议加入default选项来设置默认值
        - default
            - 设置所在列的默认值，如果字段选项null=False建议添加此项
        - db_index
            - 如果设置为True，表示为该列添加索引
        - unique
            - 如果设置为True，表示该字段在数据库中的值必须是唯一（不能重复出现）
        - db_column
            - 指定列的名称，如果不指定的话则采用属性名作为列名
        - verbose_name
            - 设置此字段在admin界面上显示名称
        - 例子
            - 创建一个属性，表示用户名称，长度30个字符，必须是唯一的，不能为空，添加索引
                - name = models.CharField(max_length=30, unique=True, null=False, db_index=True)
        - Meta类定义
            - 使用内部Meta类来给模型赋予属性，Meta类下有很多内建的类属性，可对
            模型类做一些控制
            - 示例
                -s-
                from django.db import models
            
                class Book(models.Model):
                    title = models.CharField("书名", max_length=50, default="")
                    price = models.DecimalField("定价", max_digits=7, decimal_places=2, default=0.0)
                    class Meta:
                        db_table = 'book'  # 可改变当前模型类对应的表名
                -e-
    - ORM-基本操作-创建数据
        - 数据库迁移文件混乱解决办法
            - pull了别人的代码到自己项目中并覆盖了migrate文件，在下次migrate时
            产生错误。(注：数据库中django_migrations表记录了migrate的全过程)
            - 解决方案
                - 删除migrations里所有的000?_xxx.py(__init__.py除外)
                - 删除数据库
                    - drop database mysite3;
                - 重新创建数据库
                    create database mysite3 default chartset utf8;
                - 重新生成migrations里所有的000?_xxx.py
                    - python3 manage.py makemigrations
                - 重新更新数据库
                    - python3 manage.py migrate
        - ORM创建数据
            - 基本操作包括增删改查，即CRUD(Create, Read, Update, Delete)操作
            - ORM CRUD 核心 -> 模型类.管理器对象
                - 每个继承自models.Model的模型类，都会有一个objects对象被同样
                继承下来。这个对象叫管理器对象。
                - 数据库的增删改查可以通过模型的管理器实现
                    -s-
                    class MyModel(models.Model):
                        ...
                    MyModel.objects.create(...)  # objects是管理器对象
                    -e-
            - 创建数据
                - Django ORM 使用一种直观的方式把数据库表中的数据表示成Python对象
                - 创建数据中每一条记录就是创建一个数据对象
                - 方案一
                    - MyModel.objects.create(属性1=值1, 属性2=值2, ...)
                        - 成功：返回创建好的实体对象
                        - 失败：抛出异常
                - 方案二
                    - 创建MyModel实例对象，并调用save()进行保存
                        -s-
                        obj = MyModel(属性=值, ...)
                        obj.属性 = 值
                        obj.save()
                        -e-
        - Django Shell(操作M层)
            - Django提供了一个交互式的操作项目叫Django Shell，他能够在交互式模式
            用项目工程的代码执行相应的操作
            - 利用Django Shell可以代替编写view的代码来进行直接操作
            - 注意：项目代码发生变化时，重新进入Django Shell
            - 启动方式
                - python3 manage.py shell
            - 例子
                -s-
                from favbook.models import Book
                b1 = Book.objects.create(name='python', price=30)
                
                b2 = Book(name='Django', price=50)
                b2.save()
                -e-
    

- 总结 -




