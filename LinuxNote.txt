-> 查看parrot镜像源
    - /etc/apt/sources.list.parrot文件下说可以用”parrot-mirror-selector“去查看或修改镜像源。

# 查看pip镜像
  # cat ~/.pip/pip.conf

# ll命令结果详解 #
# 结果最左边一小列表示该文件的类型：
	“-”表示普通文件；
	“d”表示目录；
	“l”表示链接文件；
	“p”表示管理文件；
	“b”表示块设备文件；
	“c”表示字符设备文件；
	“s”表示套接字文件；
	
# 文件属性
	略

# 目录/连接个数，结果第二大列：
	文件连接个数，.文件包含上级（../）、本地（.）目录
	普通文件只有上级目录
	*结尾的是可执行文件
	
# 字体颜色
	在大多数的linux shell窗口中，还能用颜色来区分不同文件的属性：

	灰白色表示普通文件；
	亮绿色表示可执行文件；
	亮红色表示压缩文件；
	灰蓝色表示目录；
	亮蓝色表示链接文件；
	亮黄色表示设备文件；

# end #

# 压缩与解压 #
ubuntu 下rar解压工具安装方法：

压缩功能

安装 sudo apt-get install rar
卸载 sudo apt-get remove rar

解压功能

安装 sudo apt-get install unrar
卸载 sudo apt-get remove unrar



ubuntu解压命令全览

.tar

解包：tar xvf FileName.tar

打包：tar cvf FileName.tar DirName

注：tar是打包，不是压缩！

~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~

.gz

解压1：gunzip FileName.gz

解压2：gzip -d FileName.gz

压缩：gzip FileName

~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~

.tar.gz 和 .tgz

解压：tar zxvf FileName.tar.gz

压缩：tar zcvf FileName.tar.gz DirName

~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~

.bz2

解压1：bzip2 -d FileName.bz2

解压2：bunzip2 FileName.bz2

压缩： bzip2 -z FileName

~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~

.tar.bz2

解压：tar jxvf FileName.tar.bz2

压缩：tar jcvf FileName.tar.bz2 DirName

~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~

.bz

解压1：bzip2 -d FileName.bz

解压2：bunzip2 FileName.bz

压缩：未知

.tar.bz

解压：tar jxvf FileName.tar.bz

压缩：未知

~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~

.Z

解压：uncompress FileName.Z

压缩：compress FileName

.tar.Z

解压：tar Zxvf FileName.tar.Z

压缩：tar Zcvf FileName.tar.Z DirName

~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~

.zip

解压：unzip FileName.zip

压缩：zip FileName.zip DirName

~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~

.rar

解压：rar x FileName.rar

压缩：rar a FileName.rar DirName

rar请到：http://www.rarsoft.com/download.htm 下载！

解压后请将rar_static拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）：

[root@www2 tmp]# cp rar_static /usr/bin/rar

~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~

.lha

解压：lha -e FileName.lha

压缩：lha -a FileName.lha FileName

lha请到：http://www.infor.kanazawa-it.ac.jp/~ishii/lhaunix/下载！

>解压后请将lha拷贝到/usr/bin目录（其他由$PATH环境变量指定的目录也可以）：

[root@www2 tmp]# cp lha /usr/bin/

~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~

.rpm

解包：rpm2cpio FileName.rpm | cpio -div

~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~

.deb

解包：ar p FileName.deb data.tar.gz | tar zxf -

~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.

tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea

解压：sEx x FileName.*

压缩：sEx a FileName.* FileName
# end #

-> 修改镜像源
    - sudo vim /etc/apt/sources.list.d/parrot.list
    - 源1（中国科技大学）：deb http://mirrors.ustc.edu.cn/parrot parrot main contrib non-free
    - 源2（北京清华大学）：deb https://mirrors.tuna.tsinghua.edu.cn/parrot main contrib non-free
	- 等完成后再输入 sudo apt-get dist-upgrade 生效
	- 安装搜狗输入法
	sudo apt --fix-broken install
	等更新完 再次输入 apt-get update 然后输入 apt-get dist-upgrade
	sudo apt-get install fcitx fcitx-frontend-gtk2 fcitx-module-dbus fcitx-bin fcitx-frontend-gtk3 fcitx-module-kimpanel fcitx-config-common fcitx-frontend-qt4 fcitx-module-lua fcitx-config-gtk fcitx-frontend-qt5 fcitx-modules fcitx-data fcitx-module-x11 fcitx-frontend-all fcitx-libs-dev fcitx-ui-classic
	关机重启

# 源代码构建安装python #
注：安装命令Centos下为yum，Ubuntu下为apt
下面使用yum:
-> 下载 wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz
-> 解压缩和解归档：
	- xz -d Python-3.7.3.tar.xz
	- tar -xvf Python-3.7.3.tar
-> 安装gcc: yum install gcc
-> 安装依赖：yum -y install zlib-devel bzip2-devel openssl=devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel libpcap-devel xz-devel libffi-devel
-> 进入Python源代码目录做安装前准备工作
	- cd Python-3.7.3
	-> 执行 ./configure --prefix=/usr/local/python37 --enable-optimizations(启用优化)  # configure(源码中自带): 修改安装路径
-> 构建安装
	make && make install
# end #

# 源代码构建安装Redis #
  # 登入网址：https://redis.io 复制下载链接
  # 在linux交互式命令模式下输入：wget http://download.redis.io/release/redis-5.0.4.tar.gz
  # 解压：gunzip redis-5.0.4.tar.gz
	 # tar -xvf redis-5.0.4.tar
  # 删除tar文件(可忽略)
	 # rm -f redis-5.0.4.tar
  # 进入redis文件: cd redis-5.0.4.tar/ 里面有Makefile文件，可以利用C语言构建安装
	 # 执行: make && make install
# end #

# 源代码构建安装git-2.21.0版本#
  # 进入https://git-scm.com首页，找到右下Tarballs点击进入复制对应版本连接地址
  # wget url
  # 解压缩: xz -d file.xz  # -d: decompression(解压)
  # 解归档: tar -xvf file.tar
  # cd git-2.21.0.tar  # 进入源代码文件
  # 源码安装需要Makefile文件，还可以通过configure文件来修改安装路径
  # 补依赖: yum install libcurl-devel
  # 修改安装路径: ./configure --prefix=/usr/local/
  # 构建并安装: make && make install
  # 查看是否安装: git --version
# end #

# vim #
  # !v  # 快速执行上一次使用的vim命令
  # !q  # 快速执行上一次执行命令

-> 创建vim配置文件
	- cd ~
	- touch .vimrc  # 创建文件
	- vim .vimrc  # 用vim编辑
	
	-> 加入如下配置：
	- set nu  # 显示行号
	- syntax on  # 高亮语法
	- set ts=4  # 制表键为4个空格
	- set expandtab  # 自动将制表键变成4个空格
	- set autoindent  # 自动缩进
	- set ruler  # 显示光标所在位置
	- set nohls  # 设置大文件中搜索的时候不用高亮

-> 移动光标
	-> hjkl:左下上右
	- 10h, 20j, 5k, 3l: 向左移10个字符，向下移动20行，向上移动5行，向右移动3字符
	-> 光标移到文件末尾
	- G
	-> 光标到300行
	- 300G
	-> 光标移到行首
	- 1G或gg或0
	-> 光标移到行尾
	- $
	-> 光标移到下一个单词
	- w
	-> 光标不动，往下翻一行
	- Ctrl+e
	-> 光标不动，往上翻一行
	- Ctrl+y
	-> 向下翻页
	- Ctrl+f
	-> 向上翻页
	- Ctrl+b

-> 复制
	-> 复制一行
	- yy
	-> 从光标所在位置复制100行
	- 100yy
	
	-> 粘贴一次
	- p
	-> 从光标所在位置粘贴100次
	- 100p
	
	-> 删除一行
	- dd
	-> 从光标所在位置删除100行
	- 100dd
	
-> 撤销
	- u  # undo

-> 恢复，重做
	- Ctrl+r

-> 分屏显示
	-> 查看打开的文件
	- ls
	-> 切换文件
	- :b 2  # 切换至第二个
	-> 分屏
	- :vs  # 垂直分屏
	- :sp  # 水平拆分
	-> 切换当前窗口
	- Ctrl+w两次
	-> 全部保存退出
	- :wqa
	
-> 区分两个文件不同
	- vim -d file1 file2

-> vim强制修改只读文件(亲测Ubuntu16中不适用)
    - w !sudo tee %
	
-> 录制宏
	-> 示例：注释代码
	- 命令模式按q再按你要定义的宏名如a，左下角会出现recording
	- 按0--输入#--按j 完成后按q结束录制
	-> 播放宏
	- 播放次数@宏名，如：5@a(a是寄存器)  # 注释5行
	
-> 搜索
	:/ 从下往上搜
	:? 从上往下搜
	n / N: 正向搜索 / 反向搜索
	
-> 替换
	:1,$s/旧内容/新内容/cgie  # 1,$:第1行到最后一行；s:替换；c:确认(confirm)；g:全局(加g后一行可以匹配多个)；i:不区分大小写(ignore case)；e:忽略错误(error)

# end #

# find #
	-> 找到根目录下所有的html文件
	- find / -name "*.html"  # -name:查找文件名
	-> 查找根目录下文件大小超过10M的文件
	- find / -size +10M  # +: 大于；-: 小于
	-> 查找根目录下一天内修改过的文件
	- find / -mtime 0  # -ctime:创建时间；-atime:最后访问时间；0:一天内；1:
	-> 查找文件类型
	- find / -type -d  # -d:文件夹 -f:普通文件 -l:软(符号)连接 -s:套接字,socket文件
# end #

# grep #
  # grep "want find" file.txt
  # 以正则表达式查找grep -E "expression" file.txt
  # 查找结果中不显示带有grep的结果: ps -ef | grep redis | grep -v grep
# end #

-> 软链接
	- ln -s path/exe1 path/exe2  # 像Windows的快捷键
	- unlink path/exe2  # 取消链接
-> 硬链接
	- ln path/exe1 path/exe2  # 给磁盘文件增加了新的引用，引用数不为0文件就不会消失
	取消硬链接时可以使用unlink取消任何一个，对其他文件没有影响。
	也可以直接使用rm命令删除

# ssh #
	-> 登录
	- ssh user@ip
	-> 拷贝文件
	- scp -r path/file user@ip:/path
# end #

# sftp #  # 安全文件传输(save file transtfer protocol)
	-> 登录
	- sftp user@ip
	-> 对本地计算机操作时命令前加l(local)
	-> 上传文件
	- put file
	-> 下载文件
	- get file
# end #

# 网络可达性检查 #
  # ping 返回的结果中
	 # icmp: Internet Control Manger Protocol
	 # ttl: time to live 数据每过一个路由器，存活次数减1，初始次数64
	
# end #

# 管理程序 #
  # systemctl start exec
  # systemctl status exec
  # systemctl enable exec  # 允许开机自启
  # systemctl disable exec  # 不允许开机自启
# end #

# 查看网络状态 #
  # netstat -nap
# end #

# 进程操作相关命令 #
  # 把命令放到后台运行: 命令 &
  # 把前台命令停下来放到后台: Ctrl+z 
  # 查看简略进程: ps
  # 查看所有进程: ps -ef
  # 查看进程数: ps aux | wc -l
  # 查看任务: jobs
  # 查看mysql是否启用: ps -ef | grep -i mysql
  # 将服务放到前台: fg %编号  # 编号：jobs查看到[中的数字]; fg: foreground
  # 将服务放到后台: fg %编号 或者 Ctrl+z
  # 结束进程: kill -9 PID # -9:强制
  # 类似windows下的任务管理器: top
# end #

# 查看某个服务是否在运行 #

	
# end #

# 防火墙 #
-> 允许远程访问6379端口
	- 依次输入
	/etc/init.d/iptables stop
	/sbin/iptables -I INPUT -p tcp --dport 6379 -j ACCEPT
	/etc/init.d/iptables save
	service iptables restart
	可以查看一下是否开放成功，检查状态的代码：/etc/init.d/iptables status
-> 其他
	Ubuntu使用命令
	1.查看防火墙当前状态
	sudo ufw status
	2.开启防火墙
	sudo ufw enable
	3.关闭防火墙
	sudo ufw disable
	4.查看防火墙版本
	sudo ufw version
	5.默认允许外部访问本机
	sudo ufw default allow
	6.默认拒绝外部访问主机
	sudo ufw default deny
	7.允许外部访问53端口
	sudo ufw allow 53
	8.拒绝外部访问53端口
	sudo ufw deny 53
	9.允许某个IP地址访问本机所有端口
	sudo ufw allow from 192.168.0.1

	CentOS6使用命令：
	查看防火墙状态、： service iptables status
	关闭防火墙： service iptables stop
	开启防火墙： service iptables start
	永久关闭防火墙：service iptables off
	
	CentOS7使用命令 ：
	查看防火墙状态：firewall-cmd --state
	关闭防火墙：systemctl stop firewalld.service
	开机禁止启动防火墙：systemctl disable firewalld.service
	开启防火墙：systemctl start firewalld.service
	如果开启防火墙遇到：unit is masked 执行以下指令
	systemctl unmasked firewalld.service
# end #
	
-> 文件系统、硬盘查看
	# 文件系统、类型、容量、已用、可用、挂载点
	- df -hT
	# 文件系统、容量、已用、可用、挂载点
	- df -hl
	# 文件系统、块、已用、可用、挂载点
	- df -lm
	# 列出当前文件夹中的文件大小及文件名并以升序排序
	- du -sh * | sort -h
	# 查看硬盘的详细信息
	- fdisk -l

# give up waiting for suspend/resume device的问题 #
	如果分区UUID发生变动
	1、同步修改/etc/fstab和/etc/initramfs/conf.d/resume（如果配置了交换分区的话）
	# 重新生成引导文件/boot/initrd.img 
	2、执行命令update-initramfs -u -k all
	3、重启即可
	update-initramfs -u -k all (这个-k参数用来指定内核，如果写all就是更新全部内核)
# end #

-> 格式化硬盘
	- mkfs -t ext4 /dev/sda6 或 mke2fs -t ext4 /dev/sda6 或 mkfs.ext4 /dev/sda6

-> 挂载硬盘
	# sudo mount 硬盘地址 要挂载的地址
	- sudo mount /dev/sda6 /home
	# 卸载
	- sudo umount 挂载的地址
	
-> 实现系统重启后自动挂载
	- vim /etc/fstab 最后一行添加/dev/sda6 /home ext4 defaults 1 2
	
-> 磁盘分区
	- sudo fdisk /etc/sda
	d 删除
	n 创建
	t 修改分区标志
	
-> 交换分区挂载UUID标识符
	# 打印swap的UUID
	- awk '/swap/ { print $1 }' /etc/fstab
	# 打印home的UUID
	- awk '/home/ { print $1 }' /etc/fstab
	# 打印所有的UUID
	- awk '// { print $1 }' /etc/fstab
	# 有关UUID所在文件
	- /etc/fstab

-> 查询分区UUID值
	- ls -al /dev/disk/by-uuid
	- dumpe2fs -h /dev/sda5
	- 通过blkid命令
	blkid /dev/sdb1  或直接使用 blkid命令
	/dev/sdb1: LABEL="SAN" UUID="f535fef8-f392-4c84-8e7a-85915d9179fb" TYPE="ext4"
	
-> 手动更改系统UUID(暂时测试无效)
	# 获取uuid #
	# Ubuntu
	- sudo uuid | xargs tune2fs /dev/sda1 -U
	# centos
	- sudo uuidgen | xargs tune2fs /dev/sda1 -U
	# end #
	
	- xfs_admin -U new_uuid /dev/sda1  # 给sda1更换uuid
	
-> 关闭交换分区
	- sudo swapoff -a 或 swapoff /etc/sda5
	# 查看是否关闭
	- free -m
-> 设立交换分区
	- mkswap /dev/sdb5
	建立完交换分区后，需要对该分区进行启用 swapon /dev/sdb6  使用swapon -s查看是否启用
	
-> 文件压缩
	tar cvf /tmp/result.rar /aim
-> 文件解压
	tar xvf 

-> 修改文件属性
   - sudo chmod a+w file_name
   
-> 挂载：sudo mount /dev/sr0 /mnt/cdrom -->将/dev/sr0挂载到/mnt/cdrom

-> ssh
    - 允许远程连接：vim /etc/ssh/sshd_config -->PermitRootLogin yes

-> 在.bashrc文件中添加一个python文件再source .bashrc运行，被添加的python文件会被执行

-> 临时配置命令别名
	- Terminal中alias 简写命令="bash 要执行的命令"
	-> 取消别名
	- unalias 简写命令

-> 永久配置命令别名：vim ~/.bashrc -->alias 简写命令="bash 要执行的命令"
    - 示例：alias pycharm="bash /home/bobby/Downloads/pycharm-2020.1/bin/pycharm.sh"
    - 再执行source ~/.bashrc使改动后的.bashrc文件生效
    - 在输入pycharm即可以快捷方式启动pycharm

# MySql #
-> 安装MySQL：sudo apt-get install mysql-server
-> 判断mysql是否启动：ps aux|grep mysqld
-> 配置mysql可以远程连接：vim /etc/mysql/mysql.conf.d/mysqld.cnf
	- 将bind-address的值（只在本地ip监听127.0.0.1）改为：0.0.0.0，监听外部ip
	- 再重启mysql：sudo service mysql restart
# end #

# redis #
-> 安装redis：sudo apt-get install redis-server
-> 配置redis可以远程连接：vim /etc/redis/redis.conf
	- 将bind 127.0.0.1 注释
	- daemonize的值设为no
	- 关闭保护模式  protected-mode  no  # 可远程telnet
-> 配置密码
	- requirepass 密码
	- 再重启redis：sudo service redis restart
-> 用密码登录
	- redis-cli -a pwd
# end #

-> 安装python3.6：sudo apt-get install python3.6
-> 安装pip3：python3.6下载后自带pip3，只需建立软连接
	- ln -s /opt/python3.6/bin/pip3 /usr/bin/pip3  # 可能路径有变动
	或是
	- sudo apt-get install python3-pip

# scrapy #
	pip3 安装scrapy之后，提示：bash: scrapy: 未找到命令
解决方法：
    创建软连接
    - sudo ln -s /home/用户名/.local/bin/scrapy /usr/bin/scrapy  # 就像Windows下的快捷方式
# end #

-> 安装mongodb：sudo apt-get install mongodb

-> 单纯复制虚拟机存储目录来复制出的虚拟机，下次打开的时候选择已复制的话，
	虚拟机软件会自行更改该新虚拟机的MAC地址，但SID这个是不会更改的。
	克隆道理也是和上面一样，完整克隆和手动复制本质没差别，操作逻辑和上面一样。
	只有链接克隆实际上是保留母虚拟机状态，子虚拟机仅存储和母虚拟机不同的数据，
	这种短时间内差异数据最小，占用磁盘空间最少。但SID还是一样的。

-> 要更改SID，只能使用sysprep.exe做通用化处理，或者使用newsid之类的程序重新生成该系统的SID。

-> 配置Fcitx选项：fcitx-config-gtk3

-> 自动修复(依赖)安装问题：sudo apt-get -f install

-> sudo aptitude:找到损坏的软件再按修复命令

-> 找到以so开头的安装包：sudo dpkg -l so*

-> 卸载软件包：sudo apt-get remove sougoupinyin

-> 卸载并清除软件包配置：sudo apt-get purge sougoupinyin

-> 下载所有自动安装及不再使用的软件包：sudo apt-get autoremove

-> 自动清除：sudo apt-get autoclean

-> 删除安装包后进不了桌面：ctrl+alt+f1进入tty1字符界面并登陆，然后删除/etc/X11/xini

# 个性设置 #
	# root 和 其他用户
	- vim .bashrc
	PS1='${debian_chroot:+($debian_chroot)}[\[\033[01;32m\]\h@\u\[\033[00m\]]:[\[\033[01;34m\]\w\[\033[00m\]]\n\[\033[00m\]\$ '
	else
		PS1='${debian_chroot:+($debian_chroot)}[\[\033[01;32m\]\h@\u\[\033[00m\]]:[\w]\$ '
	# end #

# 更换驱动 #
	删除之前安装的nvidia驱动，运行 sudo apt-get purge nvidia-*
	添加第三方驱动源，运行 sudo add-apt-repository ppa:graphics-drivers/ppa
	更新源，运行 sudo apt-get update
	查询nvidia驱动可用版本，运行sudo apt-cache search nvidia-* 查询相应版本
	安装驱动，运行 sudo apt-get install nvidia-384   （因为之前驱动就是384，所有我这里没有经过步骤4）
	sudo reboot
# end #

# 配置环境变量 #
-> 常见的环境变量：

	- /etc/profile
	- /etc/profile.d/*.sh
	- ~/.bash_profile
	- ~/.bashrc
	- /etc/bashrc

	- 系统正常启动过程的环境变量的启动：
	分支1：1-->2-->/etc/profile.d/lang.sh-->/etc/sysc config/i18n; 分支2：-->3-->4-->5-->命令提示符 and 2-->...

	注：放在家目录（3,4）下的环境变量配置文件，只会对当前用户起作用
	在/etc下的环境变量所有的用户都起作用
	
-> 临时环境变量
	-> 与Windows命令提示符中的变化
		- set    --> export
		- %PATH% --> $PATH
		- ;      --> :
		- \		 --> /
	- export PATH=$PATH:/usr/local/mysql/bin 为mysql环境
	
-> 永久变量
	- 修改用户变量
	linux下每个用户目录下都有一个 ~/.bash_profile文件,最后面加：export path=$path:/path1:/path2
	- 修改全局变量
	在/etc/profile文件中做同上操作， 再source /etc/profile生效
	
	注：除了常见的变量path之外，还有很多系统变量我们可以通过echo来查看设置。
	比如LANG系统语言，HOME宿主目录，SHELL脚本shell目录等
	
一．/etc/profile的作用

1.      USER变量：

2.      LOGNAME变量：

3.      MAIL变量：

4.      PATH变量：

5.      HOSTNAME变量：

6.      HISTSIZE变量：

7.      umask：

8.      调用/etc/profile.d/*.sh文件

二. umask  #查看系统默认权限

1.      文件最高权限为666

2.      目录最好权限为777

3.      权限不能使用数字进行换算，而必须使用字母；使用的是最高权限丢点默认的权限；

		Eg：当前默认权限为022，那么创建的文件权限就是最高权限减去默认权限：wr-wr-wr- 减去 ----w--w-  那么创建的文件权限默认为wr--r--r-

4.      Umask定义的权限，是系统默认权限中准备丢弃的权限如022，也就是----w—w-

三．~/.bash_profile的作用

         1.调用了~/.bashrc 文件

         2.在PATH变量后面加入了”:$HOME/bin”这个目录

四．/etc/bashrc的作用

         1.PS1

         2.umask

         3.PATH变量

         4.调用/etc/profile.d/*.sh文件
# end #

-> 循环文件内容
	# 直接在终端输入
	- 1.for line in $(cat file_name); do echo $line; done
	- 2.for line in 'cat file_name'; do echo $line; done
	- 3.where read -r line; do echo $line; done < file_name
	# bash脚本(分号变成'\n')
	#!/bin/bash(执行时找到bash来运行程序)
	for line in $(cat file_name)
	do
		echo $line
	done
	
-> 逐行卸载指定文件内的软件包(以安装的pip的包为例)
	for line in $(cat file_name); do sudo apt-get purge -y ${line%%=*}; done
		
# 安装Google拼音 #
一、安装前
	- 在Ubuntu18.04下，谷歌拼音输入法是基于Fcitx输入法的。因此，我们需要首先安装Fcitx。
	- 一般来说，Ubuntu最新版中都默认安装了Fcitx，但是为了确保一下，我们可以在系统终端中运行如下命令：
	- sudo apt install fcitx
二、配置Fcitx
	- 系统终端中输入命令：im-config（注：im-config是Input Method Configuration的缩写。）
	选中Fcitx，sudo reboot重启生效
三、安装谷歌拼音输入法（Google Pinyin）
	- 在Ubuntu18.04系统中安装谷歌拼音输入法（Google Pinyin）非常简单，
	- 只需要下面这个命令：
	- sudo apt install fcitx-googlepinyin
	- 在出来的选项中输入y即可安装。
	- 安装后运行如下命令配置谷歌拼音输入法：
	- fcitx-config-gtk3
	- 然后依次进行如下操作：
	- 打开Input Method Confuguration窗口：
	- 点击左下角 + 号，添加Google Pinyin输入法：
	- 最后，用快捷键：Ctrl+Shift 切换输入法，就能看到你已经能用谷歌拼音输入法打字了：
	
# end #

# Linux各目录及作用 #

	FHS（英文：Filesystem Hierarchy Standard 中文：文件系统层次结构标准），多数 Linux 版本
	采用这种文件组织形式，FHS 定义了系统中每个区域的用途、所需要的最小构成的文件和目录同时
	还给出了例外处理与矛盾处理。 FHS 定义了两层规范。
	
	- 第一层是， / 下面的各个目录应该要放什么文件数据，例如 /etc应该要放置设置文件，
	/bin 与 /sbin 则应该要放置可执行文件等等。
	
	- 第二层则是针对 /usr 及 /var 这两个目录的子目录来定义。例如 /var/log 放置系统登录文件、
	/usr/share 放置共享数据等等。

	/：根目录，一般根目录下只存放目录，不要存放件，/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中

	/bin: /usr/bin: 可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等。

	/boot：放置linux系统启动时用到的一些文件。/boot/vmlinuz 为 linux 的内核文件，以及 /boot/gurb。建议单独分区，分区大小100M即可

	/dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱 mount /dev/cdrom /mnt。

	/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有 /etc/inittab、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d修改配置文件之前记得备份。

	注：/etc/X11 存放与 x windows 有关的设置。

	/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，~表示当前用户的家目录，~edu 表示用户 edu 的家目录。建议单独分区，并设置较大的磁盘空间，方便用户存放数据

	/lib: /usr/lib: /usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助，比较重要的目录为 /lib/modules。

	/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下，通常这个目录会自动出现在装置目录下。如加载硬盘于 /disk 中，此目录下就会自动产生目录 /disk/lost+found

	/mnt: /media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载。

	/opt：给主机额外安装软件所摆放的目录。如：FC4使用的Fedora 社群开发软件，如果想要自行安装新的 KDE 桌面软件，可以将该软件安装在该目录下。以前的 Linux 系统中，习惯放置在 /usr/local 目录下

	/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有 /proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等。

	/root：系统管理员root的家目录，系统第一个启动的分区为 /，所以最好将 /root和 /放置在一个分区下。

	/sbin: /usr/sbin: /usr/local/sbin：放置系统管理员使用的可执行命令，如fdisk、shutdown、mount 等。与 /bin 不同的是，这几个目录是给系统管理员 root使用的命令，一般用户只能"查看"而不能设置和使用。

	/tmp：一般用户或正在执行的程序临时存放文件的目录,任何人都可以访问,重要数据不可放置在此目录下

	/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www 内。

	/usr：应用程序存放目录，/usr/bin 存放应用程序，/usr/share 存放共享数据，/usr/lib 存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。/usr/local: 存放软件升级包。/usr/share/doc: 系统说明文件存放目录。/usr/share/man: 程序说明文件存放目录，使用 man ls 时会查询 /usr/share/man/man1/ls.1.gz 的内容建议单独分区，设置较大的磁盘空间

	/var：放置系统执行过程中经常变化的文件，如随时更改的日志文件 /var/log，/var/log/message：所有的登录文件存放目录，/var/spool/mail：邮件存放的目录，/var/run:程序或服务启动后，其PID存放在该目录下。建议单独分区，设置较大的磁盘空间
 
-> 一切皆文件
	Linux 对数据文件(.mp3、.bmp)，程序文件(.c、.h、*.o)，设备文件（LCD、触摸屏、鼠标），
	网络文件( socket ) 等的管理都抽象为文件，使用统一的方式方法管理。
	文件分类：
	1）普通文件( 数据文件 )
	普通文件是用于存放数据、程序等信息的文件，一般都长期地存放在外存储器（磁盘）中。
	普通文件又分为文本文件和二进制文件。
	2）目录文件
	目录文件是文件系统中一个目录所包含的目录项所组成的文件。
	3）设备文件
	设备文件是用于为操作系统与设备提供连接的一种文件。在Linux系统中将设备作为文件来处理，
	操作设备就像是操作普通文件一样。每一个设备对应一个设备文件，存放在 /dev 目录中。
	5）链接文件
	似于 windows 下的快捷方式，链接又可以分为软链接（符号链接）和硬链接。
	6）管道文件
	管道文件主要用于在进程间传递数据的一种特殊文件。
	7）套接口文件
	主要用于不同计算机间网络通信的一种特殊文件。
# end #

# 开机错误 #
	-> 错误： 系统开机出现错误提示：piix4_smbus 0000:00:007.3： Host SMBus controller not enabled
	原因： 系统装入i2c_piix4模块所致，因为系统找不到这个模块，所以报错

	处理方法：
	1、查明装入模块的确切名字( lsmod | grep i2c_piix4 )，显示输出的结果是模块的确切名字：i2c_piix4

	2、将该模块列入不装入名单。编辑文件vim /etc/modprobe.d/blacklist.conf，在末尾加入
	blacklist i2c-piix4

	3、重新生成引导文件/boot/initrd.img 
	update-initramfs -u -k all

	4、重启reboot
	
	-> 错误：piix4_smbus 0000:00:07.3: Host SMBus controller not enabled的方法，方法如下

	1、查明装入模块的确切名字
	lsmod | grep i2c
	显示输出的结果是模块的确切名字，我的电脑上显示i2c_piix4
	2、将该模块列入不装入名单
	编辑文件
	sudo gedit /etc/modprobe.d/blacklist.conf
	在末尾加入
	blacklist i2c_piix4
	保存
	3、reboot

	然后重启之后再也没有出现这个错误，网上说这个貌似是SMbus总线和ic2冲突的问题？
# end #

# 各个安装命令详解 #
	一般来说著名的linux系统基本上分两大类：

	1.RedHat系列：Redhat、Centos、Fedora等

	2.Debian系列：Debian、Ubuntu等

	RedHat 系列
	1 常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数”
	2 包管理工具 yum
	3 支持tar包

	Debian系列
	1 常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数”
	2 包管理工具 apt-get
	3 支持tar包

	tar 只是一种压缩文件格式，所以，它只是把文件压缩打包而已。
	rpm 相当于windows中的安装文件，它会自动处理软件包之间的依赖关系。
	优缺点来说，rpm一般都是预先编译好的文件，它可能已经绑定到某种CPU或者发行版上面了。
	tar一般包括编译脚本，你可以在你的环境下编译，所以具有通用性。
	如果你的包不想开放源代码，你可以制作成rpm，如果开源，用tar更方便了。
	tar一般都是源码打包的软件，需要自己解包，然后进行安装三部曲，./configure, make, make install. 来安装软件。

	rpm是redhat公司的一种软件包管理机制，直接通过rpm命令进行安装删除等操作，最大的优点是自己内部自动处理了各种软件包可能的依赖关系。

	-------------------------------- *.rpm形式的二进制软件包[centos]
	安装：rpm -ivh *.rpm
	卸载：rpm -e packgename
			rpm -q nginx  查看是否已经安装
		升级：rpm -Uvh xxx
	查询：
	查询所有安装的包： rpm -qa
	查询某个包：rpm -qa | grep xxx
	rpm -qi xxx
	查询软件的安装路径：rpm -ql xxx
	rpm -qc xxx
	查询某个文件是那个rpm包产生：rpm -qf /etc/yum.conf
	rpm -qpi xxx
	rpm -qa|grep php  查看已安装的RMP包
	安装：rpm -ivh xxx
	移除：rpm -e xxx
	升级：rpm -Uvh xxx
	查询：
	查询所有安装的包： rpm -qa
	查询某个包：rpm -qa | grep xxx
	rpm -qi xxx
	查询软件的安装路径：rpm -ql xxx
	rpm -qc xxx
	查询某个文件是那个rpm包产生：rpm -qf /etc/yum.conf
	rpm -qpi xxx
	-------------------------------- src.rpm 源代码分发软件包的安装与卸载
	Linux软件的源代码分发是指提供了该软件所有程序源代码的发布形式，需要用户自己编译成可执行的二进制代码并进行安装，其优点是配置灵活，可以随意去掉或保留某些功能/模块，适应多种硬件/操作系统平台及编译环境，缺点是难度较大，一般不适合初学者使用。
	1、*.src.rpm形式的源代码软件包
	安装：rpm -rebuild *.src.rpm
	cd /usr/src/dist/RPMS
	rpm -ivh *.rpm
	卸载：rpm -e packgename
	说明：rpm –rebuild *.src.rpm命令将源代码编译并在/usr/src/dist/RPMS下生成二进制的rpm包，然后再安装该二进制包即可。packgename如前所述。
	--------------------------------dpkg【ubuntu】
	dpkg -l | grep 'php'  使用dpkg -l 来查看已经安装了的软件
	dpkg 是Debian[待宾] Package 的简写。为 Debian 专门开发的套件管理系统，方便软件的安装、更新及移除。所有源自Debian的Linux 发行版都使用 dpkg，例如 Ubuntu、Knoppix 等。
	以下是一些 Dpkg 的普通用法：
	1、dpkg -i <package.deb>
	安装一个 Debian 软件包，如你手动下载的文件。
	2、dpkg -c <package.deb>
	列出 <package.deb> 的内容。
	3、dpkg -I <package.deb>
	从 <package.deb> 中提取包裹信息。
	4、dpkg -r <package>
	移除一个已安装的包裹。
	5、dpkg -P <package>
	完全清除一个已安装的包裹。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。
	6、dpkg -L <package>
	列出 <package> 安装的所有文件清单。同时请看 dpkg -c 来检查一个 .deb 文件的内容。
	7、dpkg -s <package>
	显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .deb 文件中提取的包裹信息。
	8、dpkg-reconfigure <package>
	重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)。

	-------------------------------- 使用yum和apt-get。软件管理方法的升级.
	yum的配置文件是/etc/yum.conf
	1. 我们来先讲Redhat的yum 这种高级的包管理.
	yum install gcc  [centos]
	更新：yum update
	安装：yum install xxx
	移除：yum remove xxx
	清除已经安装过的档案（/var/cache/yum/）：yum clean all
	搜寻：yum search xxx
	列出所有档案：yum list
	查询档案讯息：yum info xxx
	#sudo -s
	#LANG=C
	#yum -y install gcc gcc-c autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libpng libpng-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel
	用YUM安装软件包
	yum -y <package_name>
	命令：yum install <package_name>
	用YUM删除软件包
	命令：yum remove <package_name>
	yum -y remove httpd*   
	命令：yum search <keyword>
	列出所有可安装的软件包
	命令：yum list
	yum list php*
	列出所有可更新的软件包
	命令：yum list updates
	列出所有已安装的软件包
	命令：yum list installed
	列出所有已安装但不在 Yum Repository 內的软件包
	命令：yum list extras
	列出所指定的软件包
	命令：yum list <package_name>
	yum = Yellow dog Updater, Modified
	主要功能是更方便的添加/删除/更新RPM包.
	它能自动解决包的倚赖性问题.
	它能便于管理大量系统的更新问题
	yum特点
	可以同时配置多个资源库(Repository)
	简洁的配置文件(/etc/yum.conf
	自动解决增加或删除rpm包时遇到的倚赖性问题
	使用方便
	保持与RPM数据库的一致性
	yum安装
	CentOS 自带(yum-*.noarch.rpm)
	#rpm -ivh yum-*.noarch.rpm
	在第一次启用yum之前首先需要导入系统的RPM-GPG-KEY：
	#rpm --import /usr/share/doc/centos-release-3(4)/RPM-GPG-KEY-CentOS-3(4)
	yum指令
	注:当第一次使用yum或yum资源库有更新时,yum会自动下载 所有所需的headers放置于/var/cache/yum目录下,所需时间可能较长.
	rpm包的更新
	检查可更新的rpm包
	#yum check-update
	更新所有的rpm包
	#yum update
	更新指定的rpm包,如更新kernel和kernel source
	#yum update kernel kernel-source
	大规模的版本升级,与yum update不同的是,连旧的淘汰的包也升级
	#yum upgrade
	rpm包的安装和删除
	安装rpm包,如xmms-mp3
	#yum install xmms-mp3
	删除rpm包,包括与该包有倚赖性的包
	#yum remove licq
	注:同时会提示删除licq-gnome,licq-qt,licq-text
	yum暂存(/var/cache/yum/)的相关参数
	清除暂存中rpm包文件
	#yum clean packages
	清除暂存中rpm头文件
	#yum clearn headers
	清除暂存中旧的rpm头文件
	#yum clean oldheaders
	清除暂存中旧的rpm头文件和包文件
	#yum clearn 或#yum clearn all
	注:相当于yum clean packages + yum clean oldheaders
	包列表
	列出资源库中所有可以安装或更新的rpm包
	#yum list
	列出资源库中特定的可以安装或更新以及已经安装的rpm包
	#yum list mozilla#yum list mozilla*
	注:可以在rpm包名中使用匹配符,如列出所有以mozilla开头的rpm包
	列出资源库中所有可以更新的rpm包
	#yum list updates
	列出已经安装的所有的rpm包
	#yum list installed
	列出已经安装的但是不包含在资源库中的rpm包
	#yum list extras
	注:通过其它网站下载安装的rpm包
	rpm包信息显示(info参数同list)
	列出资源库中所有可以安装或更新的rpm包的信息
	#yum info
	列出资源库中特定的可以安装或更新以及已经安装的rpm包的信息
	#yum info mozilla#yum info mozilla*
	注:可以在rpm包名中使用匹配符,如列出所有以mozilla开头的rpm包的信息
	列出资源库中所有可以更新的rpm包的信息
	#yum info updates
	列出已经安装的所有的rpm包的信息
	#yum info installed
	列出已经安装的但是不包含在资源库中的rpm包的信息
	#yum info extras
	注:通过其它网站下载安装的rpm包的信息
	搜索rpm包
	搜索匹配特定字符的rpm包
	#yum search mozilla
	注:在rpm包名,包描述等中搜索
	搜索有包含特定文件名的rpm包
	#yum provides realplay
	增加资源库
	例如:增加rpm.livna.org作为资源库
	安装Livna.org rpms GPG key
	#rpm --import http://rpm.livna.org/RPM-LIVNA-GPG-KEY
	检查GPG Key
	# rpm -qa gpg-pubkey*
	显示Key信息
	#rpm -qi gpg-pubkey-a109b1ec-3f6e28d5
	(注:如果要删除Key,使用#rpm -e gpg-pubkey-a109b1ec-3f6e28d5)
	yum常用的命令
	# yum install xxx            安装xxx软件
	# yum info xxx                查看xxx软件的信息
	# yum remove xxx        删除软件包
	# yum list                        列出软件包
	# yum clean                    清除缓冲和就的包
	# yum provides xxx        以xxx为关键字搜索包（提供的信息为关键字）
	# yum search xxx           搜索软件包（以名字为关键字）
	# yum groupupdate xxx
	# yum grouplist xxx
	# yum groupremove xxx
	这三个都是一组为单位进行升级 列表和删除的操作。。比如 "Mysql Database"就是一个组会同时操作相关的所有软件包；
	# yum update                系统升级
	# yum list available        列出所有升级源上的包；
	# yum list updates         列出所有升级源上的可以更新包；
	# yum list installed         列出已经安装的包；
	# yun update kernel       升级内核；
	yum常用的源
	1) 自动选择最快的源
	由于yum中有的mirror速度是非常慢的，如果yum选择了这个mirror，这个时候yum就会非常慢，对此，可以下载fastestmirror插件，它会自动选择最快的mirror：
	#yum install yum-fastestmirror
	配置文件：（一般不用动）/etc/yum/pluginconf.d/fastestmirror.conf
	你的yum镜像的速度测试记录文件：/var/cache/yum/timedhosts.txt
	(2)使用图形界面的yum
	如果觉得命令行的yum不方便，那么可以使用图形化的yumex，这个看起来更方便，因为可以自由地选择软件仓库：
	#yum install yumex
	然后在系统工具中就可以看到yum extender了。实际上系统自带的“添加/删除程序“也可以实现图形化的软件安装，但有些yumex的功能它没有。
	2.讲讲Ubuntu中的高级包管理方法apt-get
	配置文件/etc/apt/sources.list
	对于Server版， 推荐使用aptitude来查看，安装、删除deb包
	sudo apt-get install aptitude
	然后执行 sudo aptitude 进入管理
	也可以使用命令：
	aptitude update 更新可用的包列表
	aptitude upgrade 升级可用的包
	aptitude dist-upgrade 将系统升级到新的发行版
	aptitude install pkgname 安装包
	aptitude remove pkgname 删除包
	aptitude purge pkgname 删除包及其配置文件
	aptitude search string 搜索包
	aptitude show pkgname 显示包的详细信息
	aptitude clean 删除下载的包文件
	aptitude autoclean 仅删除过期的包文件
	考虑到系统的兼容性,并且上面的东东比较都大,不找最新版本了，直接用apt-get install XXX 来安装.因为我们的Ubuntu是dailyBulid的,所以光盘的内容基本上都是最新的了,无需重新下载.一定要最新版本的话，不妨先apt-get update 来更新一下软件的仓库,然后再 apt-get install.
	常用的APT命令参数：
	apt-cache search package 搜索包
	apt-cache show package 获取包的相关信息，如说明、大小、版本等
	sudo apt-get install package 安装包
	sudo apt-get install package - - reinstall 重新安装包
	sudo apt-get -f install 修复安装"-f = ——fix-missing"
	sudo apt-get remove package 删除包
	sudo apt-get remove package - - purge 删除包，包括删除配置文件等
	sudo apt-get update 更新源
	sudo apt-get upgrade 更新已安装的包
	sudo apt-get dist-upgrade 升级系统
	sudo apt-get dselect-upgrade 使用 dselect 升级
	apt-cache depends package 了解使用依赖
	apt-cache rdepends package 是查看该包被哪些包依赖
	sudo apt-get build-dep package 安装相关的编译环境
	apt-get source package 下载该包的源代码
	sudo apt-get clean && sudo apt-get autoclean 清理无用的包
	sudo apt-get check 检查是否有损坏的依赖
# end #















