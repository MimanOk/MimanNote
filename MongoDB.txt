## 默认连接端口：27017

# 笔记来源：菜鸟教程（https://www.runoob.com/）

# 教程：https://www.runoob.com/mongodb/mongodb-window-install.html
# 下载安装并配置好环境变量后(https://www.mongodb.com/download-center/community) #

# 普通配置
    # --bind_ip  # 绑定服务器IP，若绑定127.0.0.1，则只能本机访问，不指定默认所有IP
    # --logpath  # 日志文件路径（路径含文件）
    # --logappend  # 使用追加的方式写日志
    # --dbpath  # 指定数据库路径
    # --port  # 指定服务器端口号，默认端口27017
    # --serviceName  # 指定服务名称
    # --install  # 指定作为一个Windows服务安装
    # --remove [--serviceName "MongoDB"]  # 移除服务
    # 运行
        mongod --dbpath "D:\MongoDB\Server\3.4\db" --logpath "D:\MongoDB\Server\3.4\logs\mongodb.log" --install --serviceName "MongoDB"
        net start MongoDB
# 文件配置
    # mongodb.conf
        dbpath=D:\MongoDB\Server\3.4\db  # 数据库路径
        logpath=D:\MongoDB\Server\3.4\logs\mongodb.log  # 日志输出文件路径
        logappend=true  # 错误日志采用追加模式
        journal=true  # 启用日志文件，默认启用
        quiet=true  # 过滤掉无用的日志信息,若要调试，置为false
        port=27017  # 端口号
    # 运行
        mongod --config D:\MongoDB\...\mongodb.conf --install --serviceName "MongoDB"
 
# 管理员权限运行
    # 启动MongoDB服务
        net start MongoDB
    # 关闭MongoDB服务
        net stop MongoDB\
    # 移除MongoDB服务
        mongod --remove
 
# 连接mongodb数据库
    >mongo

# 查看当前使用的数据库
    >db

# 显示库
    >show dbs

# 选择库
    >use 库名

# 显示库中集合名
    >show collections
    
# MongoDB 后台管理 Shell
    如果你需要进入MongoDB后台管理，你需要先打开mongodb装目录的下的bin目录，然后执行mongo.exe文件，
    MongoDB Shell是MongoDB自带的交互式Javascript shell,用来对MongoDB进行操作和管理的交互式环境。
    当你进入mongoDB后台后，它默认会链接到 test 文档（数据库）
    >mongo
    MongoDB shell version v3.4.2
    ...
    >
    
    # 由于它是一个JavaScript shell，您可以运行一些简单的算术运算
        > 2 + 3
        5
        >


## 基础概念
        
# 概念
    SQL术语/概念	MongoDB术语/概念	解释/说明
    database	    database	        数据库
    table	        collection	        数据库表/集合
    row	            document	        数据记录行/文档
    column	        field	            数据字段/域
    index	        index	            索引
    table joins	 	                    表连接,MongoDB不支持
    primary key	    primary key	        主键,MongoDB自动将_id字段设置为主键

# 数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。
    不能是空字符串（"")。
    不得含有' '（空格)、.、$、/、\和\0 (空字符)。
    应全部小写。
    最多64字节。

# 有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。
    admin： 从权限的角度来看，这是"root"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。
    local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合
    config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。

# 文档(Document)
    文档是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。
    一个简单的文档例子如下：
    {"site":"www.runoob.com", "name":"菜鸟教程"}
    
    # 需要注意的是：
        文档中的键/值对是有序的。
        文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。
        MongoDB区分类型和大小写。
        MongoDB的文档不能有重复的键。
        文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。
        文档键命名规范：

        键不能含有\0 (空字符)。这个字符用来表示键的结尾。
        .和$有特别的意义，只有在特定环境下才能使用。
        以下划线"_"开头的键是保留的(不是严格要求的)。
        
# 合法的集合名
    集合名不能是空字符串""。
    集合名不能含有\0字符（空字符)，这个字符表示集合名的结尾。
    集合名不能以"system."开头，这是为系统集合保留的前缀。
    用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$。

# capped collections
    Capped collections 就是固定大小的collection。

    它有很高的性能以及队列过期的特性(过期按照插入的顺序). 有点和 "RRD" 概念类似。

    Capped collections 是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能和标准的 collection 不同，你必须要显式的创建一个capped collection，指定一个 collection 的大小，单位是字节。collection 的数据存储空间值提前分配的。

    Capped collections 可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的，所以当我们更新Capped collections 中文档的时候，更新后的文档不可以超过之前文档的大小，这样话就可以确保所有文档在磁盘上的位置一直保持不变。

    由于 Capped collection 是按照文档的插入顺序而不是使用索引确定插入位置，这样的话可以提高增添数据的效率。MongoDB 的操作日志文件 oplog.rs 就是利用 Capped Collection 来实现的。

    要注意的是指定的存储大小包含了数据库的头信息。

    db.createCollection("mycoll", {capped:true, size:100000})
    在 capped collection 中，你能添加新的对象。
    能进行更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。
    使用 Capped Collection 不能删除一个文档，可以使用 drop() 方法删除 collection 所有的行。
    删除之后，你必须显式的重新创建这个 collection。
    在32bit机器中，capped collection 最大存储为 1e9( 1X109)个字节。

# 元数据
    数据库的信息是存储在集合中。它们使用了系统的命名空间：

    dbname.system.*
    在MongoDB数据库中名字空间 <dbname>.system.* 是包含多种系统信息的特殊集合(Collection)，如下:

    集合命名空间	描述
    dbname.system.namespaces	列出所有名字空间。
    dbname.system.indexes	列出所有索引。
    dbname.system.profile	包含数据库概要(profile)信息。
    dbname.system.users	列出所有可访问数据库的用户。
    dbname.local.sources	包含复制对端（slave）的服务器信息和状态。
    对于修改系统集合中的对象有如下限制。

    在{{system.indexes}}插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的drop index命令将自动更新相关信息)。

    {{system.users}}是可修改的。 {{system.profile}}是可删除的。
    
# MongoDB 数据类型
    下表为MongoDB中常用的几种数据类型。

    数据类型	描述
    String	字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。
    Integer	整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。
    Boolean	布尔值。用于存储布尔值（真/假）。
    Double	双精度浮点值。用于存储浮点值。
    Min/Max keys	将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。
    Array	用于将数组或列表或多个值存储为一个键。
    Timestamp	时间戳。记录文档修改或添加的具体时间。
    Object	用于内嵌文档。
    Null	用于创建空值。
    Symbol	符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。
    Date	日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。
    Object ID	对象 ID。用于创建文档的 ID。
    Binary Data	二进制数据。用于存储二进制数据。
    Code	代码类型。用于在文档中存储 JavaScript 代码。
    Regular expression	正则表达式类型。用于存储正则表达式。
    
# 几种重要的数据类型。
    # ObjectId
        ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：
        前 4 个字节表示创建 unix 时间戳,格林尼治时间 UTC 时间，比北京时间晚了 8 个小时
        接下来的 3 个字节是机器标识码
        紧接的两个字节由进程 id 组成 PID
        最后三个字节是随机数
        0 1 2 3 | 4 5 6 | 7 8 | 9 10 11
        时间戳  | 机器  | PID | 计数器
        
        MongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象
        由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间:
        > var newObject = ObjectId()
        > newObject.getTimestamp()
        ISODate("2017-11-25T07:21:10Z")
        
        ObjectId 转为字符串
        > newObject.str
        5a1919e63df83ce79df8b38f
        
    # 字符串
        BSON 字符串都是 UTF-8 编码。
        
    # 时间戳
        BSON 有一个特殊的时间戳类型用于 MongoDB 内部使用，与普通的 日期 类型不相关。 时间戳值是一个 64 位的值。其中：

        前32位是一个 time_t 值（与Unix新纪元相差的秒数）
        后32位是在某秒中操作的一个递增的序数
        在单个 mongod 实例中，时间戳值通常是唯一的。

        在复制集中， oplog 有一个 ts 字段。这个字段中的值使用BSON时间戳表示了操作时间。

        BSON 时间戳类型主要用于 MongoDB 内部使用。在大多数情况下的应用开发中，你可以使用 BSON 日期类型。

    # 日期
        表示当前距离 Unix新纪元（1970年1月1日）的毫秒数。日期类型是有符号的, 负数表示 1970 年之前的日期。

        > var mydate1 = new Date()     //格林尼治时间
        > mydate1
        ISODate("2018-03-04T14:58:51.233Z")
        > typeof mydate1
        object
        > var mydate2 = ISODate() //格林尼治时间
        > mydate2
        ISODate("2018-03-04T15:00:45.479Z")
        > typeof mydate2
        object
        这样创建的时间是日期类型，可以使用 JS 中的 Date 类型的方法。

        返回一个时间类型的字符串：

        > var mydate1str = mydate1.toString()
        > mydate1str
        Sun Mar 04 2018 14:58:51 GMT+0000 (UTC) 
        > typeof mydate1str
        string
        或者

        > Date()
        Sun Mar 04 2018 15:02:59 GMT+0000 (UTC)
        
## 基础概念 end

## MongoDB连接
    MongoDB - 连接
    在本教程我们将讨论 MongoDB 的不同连接方式。

    启动 MongoDB 服务
    在前面的教程中，我们已经讨论了如何启动 MongoDB 服务，你只需要在 MongoDB 安装目录的 bin 目录下执行 mongodb 即可。

    执行启动操作后，mongodb 在输出一些必要信息后不会输出任何信息，之后就等待连接的建立，当连接被建立后，就会开始打印日志信息。

    你可以使用 MongoDB shell 来连接 MongoDB 服务器。你也可以使用 PHP 来连接 MongoDB。本教程我们会使用 MongoDB shell 来连接 Mongodb 服务，之后的章节我们将会介绍如何通过php 来连接MongoDB服务。

    标准 URI 连接语法：

    mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]
    mongodb:// 这是固定的格式，必须要指定。

    username:password@ 可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登录这个数据库

    host1 必须的指定至少一个host, host1 是这个URI唯一要填写的。它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。

    portX 可选的指定端口，如果不填，默认为27017

    /database 如果指定username:password@，连接并验证登录指定数据库。若不指定，默认打开 test 数据库。

    ?options 是连接选项。如果不使用/database，则前面需要加上/。所有连接选项都是键值对name=value，键值对之间通过&或;（分号）隔开

    标准的连接格式包含了多个选项(options)，如下所示：

    选项	描述
    replicaSet=name	验证replica set的名称。 Impliesconnect=replicaSet.
    slaveOk=true|false	
    true:在connect=direct模式下，驱动会连接第一台机器，即使这台服务器不是主。在connect=replicaSet模式下，驱动会发送所有的写请求到主并且把读取操作分布在其他从服务器。
    false: 在 connect=direct模式下，驱动会自动找寻主服务器. 在connect=replicaSet 模式下，驱动仅仅连接主服务器，并且所有的读写命令都连接到主服务器。
    safe=true|false	
    true: 在执行更新操作之后，驱动都会发送getLastError命令来确保更新成功。(还要参考 wtimeoutMS).
    false: 在每次更新之后，驱动不会发送getLastError来确保更新成功。
    w=n	驱动添加 { w : n } 到getLastError命令. 应用于safe=true。
    wtimeoutMS=ms	驱动添加 { wtimeout : ms } 到 getlasterror 命令. 应用于 safe=true.
    fsync=true|false	
    true: 驱动添加 { fsync : true } 到 getlasterror 命令.应用于 safe=true.
    false: 驱动不会添加到getLastError命令中。
    journal=true|false	如果设置为 true, 同步到 journal (在提交到数据库前写入到实体中). 应用于 safe=true
    connectTimeoutMS=ms	可以打开连接的时间。
    socketTimeoutMS=ms	发送和接受sockets的时间。
    
    # 实例
        # 使用默认端口来连接 MongoDB 的服务。
            mongodb://localhost
        # 通过 shell 连接 MongoDB 服务：
            $ ./mongo
        # 使用用户 admin 使用密码 123456 连接到本地的 MongoDB 服务上。输出结果如下所示：
            > mongodb://admin:123456@localhost/
            ... 
        # 使用用户名和密码连接登录到指定数据库，格式如下
            mongodb://admin:123456@localhost/test
            
        # 连接 replica pair, 服务器1为example1.com服务器2为example2。
            mongodb://example1.com:27017,example2.com:27017
            
        # 连接 replica set 三台服务器 (端口 27017, 27018, 和27019):
            mongodb://localhost,localhost:27018,localhost:27019
            
        # 连接 replica set 三台服务器, 写入操作应用在主服务器 并且分布查询到从服务器。
            mongodb://host1,host2,host3/?slaveOk=true
            
        # 直接连接第一个服务器，无论是replica set一部分或者主服务器或者从服务器。
            mongodb://host1,host2,host3/?connect=direct;slaveOk=true
            
        # 当你的连接服务器有优先级，还需要列出所有服务器，你可以使用上述连接方式。
        安全模式连接到localhost:
            mongodb://localhost/?safe=true
            
        # 以安全模式连接到replica set，并且等待至少两个复制服务器成功写入，超时时间设置为2秒。
            mongodb://host1,host2,host3/?safe=true;w=2;wtimeoutMS=2000

## MongoDB连接end        

        
# 创建数据库
    # use DATABASE_NAME  # 如果数据库不存在，则创建数据库，否则切换到指定数据库。
    刚创建的数据库并不在数据库的列表中，需要向其插入数据才会显示

# 删除数据库
    # db.dropDatabase()  # 删除当前数据库，默认是test

# 创建集合
    # db.createCollection(name, options)

        name: 要创建的集合名称
        options: 可选参数, 指定有关内存大小及索引的选项
        
        # options 可以是如下参数：

            字段	类型	描述
            capped	布尔	（可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。当该值为 true 时，必须指定 size 参数。
            autoIndexId	布尔	3.2 之后不再支持该参数。（可选）如为 true，自动在 _id 字段创建索引。默认为 false。
            size	数值	（可选）为固定集合指定一个最大值，即字节数。如果 capped 为 true，也需要指定该字段。
            max	数值	（可选）指定固定集合中包含文档的最大数量。
            在插入文档时，MongoDB 首先检查固定集合的 size 字段，然后检查 max 字段。
    
        # 示例
            创建固定集合 mycol，整个集合空间大小 6142800 KB, 文档最大个数为 10000 个。

            > db.createCollection("mycol", { capped : true, autoIndexId : true, size : 
               6142800, max : 10000 } )
            { "ok" : 1 }
            >
            在 MongoDB 中，你不需要创建集合。当你插入一些文档时，MongoDB 会自动创建集合。

            > db.mycol2.insert({"name" : "菜鸟教程"})
            > show collections
            mycol2
            ...
    
# 删除集合
    # db.collection.drop()
    # 示例
        >use youdb
        >db.createCollection("youcollection")
        >db.youcollection.drop()
        
# 插入文档
    文档的数据结构和 JSON 基本一样。
    所有存储在集合中的数据都是 BSON 格式。
    BSON 是一种类似 JSON 的二进制形式的存储格式，是 Binary JSON 的简称。
    
    db.COLLECTION_NAME.insert(document)
    或
    db.COLLECTION_NAME.save(document)
    save()：如果 _id 主键存在则更新数据，如果不存在就插入数据。该方法新版本中已废弃，可以使用 db.collection.insertOne() 或 db.collection.replaceOne() 来代替。
    insert(): 若插入的数据主键已经存在，则会抛 org.springframework.dao.DuplicateKeyException 异常，提示主键重复，不保存当前数据。
    
    3.2 版本之后新增了 db.collection.insertOne() 和 db.collection.insertMany()。

    db.collection.insertOne() 用于向集合插入一个新文档，语法格式如下：

    db.collection.insertOne(
       <document>,
       {
          writeConcern: <document>
       }
    )
    db.collection.insertMany() 用于向集合插入一个多个文档，语法格式如下：

    db.collection.insertMany(
       [ <document 1> , <document 2>, ... ],
       {
          writeConcern: <document>,
          ordered: <boolean>
       }
    )
    参数说明：

    document：要写入的文档。
    writeConcern：写入策略，默认为 1，即要求确认写操作，0 是不要求。
    ordered：指定是否按顺序写入，默认 true，按顺序写入。
    实例
    以下文档可以存储在 MongoDB 的 runoob 数据库 的 col 集合中：

    >db.col.insert({title: 'MongoDB 教程', 
        description: 'MongoDB 是一个 Nosql 数据库',
        by: '菜鸟教程',
        url: 'http://www.runoob.com',
        tags: ['mongodb', 'database', 'NoSQL'],
        likes: 100
    })
    >db.user.insertOne({name: "Miman1"})
    >db.user.insertMany([{name: "Miman2"}, {age: "24"}])

# 更新文档
    MongoDB 使用 update() 和 save() 方法来更新集合中的文档。接下来让我们详细来看下两个函数的应用及其区别。

    # update() 方法
        update() 方法用于更新已存在的文档。语法格式如下：

        db.collection.update(
           <query>,
           <update>,
           {
             upsert: <boolean>,
             multi: <boolean>,
             writeConcern: <document>
           }
        )
        参数说明：

        query : update的查询条件，类似sql update查询内where后面的。
        update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的
        upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。
        multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。
        writeConcern :可选，抛出异常的级别。
        # 示例update方法
            # 修改一条
                db.user.update({name: "Miman"}, {$set: {name: "Mi"}})
                db.user.find().pretty()  # 美化查找结果
            # 修改多条
                db.user.update({name: "Miman"}, {$set: {name: "Mi"}, {multi: true})
                
        # 示例save方法
            db.collection.save(
               <document>,
               {
                 writeConcern: <document>
               }
            )
            参数说明：

            document : 文档数据。
            writeConcern :可选，抛出异常的级别。
            # 示例
                db.user.save({"_id" : ObjectId("..."), name: "Miman", ...})
                
        # 更多示例
            # 只更新第一条记录：
                db.col.update( { "count" : { $gt : 1 } } , { $set : { "test2" : "OK"} } );
            
            # 全部更新：
                db.col.update( { "count" : { $gt : 3 } } , { $set : { "test2" : "OK"} },false,true );
            
            # 只添加第一条：
                db.col.update( { "count" : { $gt : 4 } } , { $set : { "test5" : "OK"} },true,false );
            
            # 全部添加进去:
                db.col.update( { "count" : { $gt : 5 } } , { $set : { "test5" : "OK"} },true(不存在update记录就添加objNew),true(更新查找到的全部结果) );
            
            # 全部更新：
                db.col.update( { "count" : { $gt : 15 } } , { $inc : { "count" : 1} },false,true );
            
            # 只更新第一条记录：
                db.col.update( { "count" : { $gt : 10 } } , { $inc : { "count" : 1} },false,false );
                
# 删除文档
    在执行remove()函数前先执行find()命令来判断执行的条件是否正确，这是一个比较好的习惯。
    
    # 语法
        remove() 方法的基本语法格式如下所示：

        db.collection.remove(
           <query>,
           <justOne>
        )
        如果你的 MongoDB 是 2.6 版本以后的，语法格式如下：

        db.collection.remove(
           <query>,
           {
             justOne: <boolean>,
             writeConcern: <document>
           }
        )
        query :（可选）删除的文档的条件。
        justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。
        writeConcern :（可选）抛出异常的级别。
        
        # 示例
            >db.user.remove({"name": "Miman"})  # 移除name为Miman的文档
            >db.user.remove({})  # 删除collection中的全部数据，类似MySql中的truncate
            remove() 方法 并不会真正释放空间。
            需要继续执行 db.repairDatabase() 来回收磁盘空间。
                > db.repairDatabase()
                或者
                > db.runCommand({ repairDatabase: 1 })

        注：remove() 方法已经过时了，现在官方推荐使用 deleteOne() 和 deleteMany() 方法。
            >db.user.deleteMany({})  # 删除collection中的全部数据，类似MySql中的truncate
            >db.user.deleteMany({"name": "Miman"})  # 移除name为Miman的全部文档
            >db.user.deleteOne({"name": "Miman"})# 移除name为Miman的一个文档

# 查询文档
    db.collection.find(query, projection)  # find() 方法以非结构化的方式来显示所有文档。
    query ：可选，使用查询操作符指定查询条件
    projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。
    如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：
    
    >db.col.find().pretty()
    除了 find() 方法之外，还有一个 findOne() 方法，它只返回一个文档。
    
    MongoDB 与 RDBMS Where 语句比较
    如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：

    操作	            格式	                         范例	                     RDBMS中的类似语句
    等于	    {<key>:<value>}	        db.col.find({"by":"菜鸟教程"}).pretty()	    where by = '菜鸟教程'
    小于	    {<key>:{$lt:<value>}}	db.col.find({"likes":{$lt:50}}).pretty()	where likes < 50
    小于或等于	{<key>:{$lte:<value>}}	db.col.find({"likes":{$lte:50}}).pretty()	where likes <= 50
    大于	    {<key>:{$gt:<value>}}	db.col.find({"likes":{$gt:50}}).pretty()	where likes > 50
    大于或等于	{<key>:{$gte:<value>}}	db.col.find({"likes":{$gte:50}}).pretty()	where likes >= 50
    不等于	    {<key>:{$ne:<value>}}	db.col.find({"likes":{$ne:50}}).pretty()	where likes != 50

    # MongoDB AND 条件
        MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。
        语法格式如下：
        >db.col.find({key1:value1, key2:value2}).pretty()
        
    # MongoDB OR 条件
        >db.col.find({$or:[{"by":"菜鸟教程"},{"title": "MongoDB 教程"}]}).pretty()

    # AND 和 OR 联合使用
        >db.col.find({"likes": {$gt:50}, $or: [{"by": "菜鸟教程"},{"title": "MongoDB 教程"}]}).pretty()
    
    # 查找所有
        db.user.find()
    # 查找所有name属性, 默认带有_id属性
        # 不带_id
            db.user.find({}, {name:1})
        # 带_id
            db.user.find({}, {name:1, _id: 0})
    # 查找所有年龄为24的人的名字
        # 带_id
            db.user.find({age: 24}, {name: 1, _id: 0})
    # goods_id不等于3的商品
        db.user.find({goods_id: {$ne: 3}}, {goods_name: 1, goods_price: 1, _id: 0})
    # goods_price小于等于100的商品
        db.user.find({goods_price: {$lte: 100}}, {goods_name: 1, goods_id: 1, _id: 0})
    # goods_id为5和11的商品
        # db.user.find({goods_id: {$in: [5, 11]}}, {goods_name: 1, goods_price: 1, _id: 0})
    # 100<=goods_price<=500
        # db.user.find({$and: [goods_price: {$gte: 100}, goods_price: {$lte: 500}]}, {goods_name: 1, goods_id: 1, _id: 0})
    # goods_id != 3且goods_id != 10
        # db.user.find({$and: [goods_id: {$ne: 3}, goods_id: {$ne: 10}]}, {goods_name: 1, goods_id: 1, _id: 0})
        # db.user.find({goods_id: {$nin: [3, 10]}}, {goods_name: 1, goods_id: 1, _id: 0})
        # db.user.find({$nor: [{goods_id: 3}, {goods_id: 10}], {goods_name: 1, goods_id: 1, _id: 0})
    # 存在goods_name的列
        # db.user.find({goods_name: {$exists: 1}})
    # 取出goods_id % 5 == 1的列
        # db.user.find({goods_id: {$mod: [5, 1]}}, {goods_name: 1, goods_id: 1, _id: 0})
    # 取出数据类型为整型或浮点型或双精度型的年龄列
        # db.user.find({age: {$type: 1}})
    # 取出price大于100且小于200
        # db.col.find({price : {$lt :200, $gt : 100}})
            类似于SQL语句：
            Select * from col where price>100 AND price<200;
    
    # 包含指定内容的列（爱好为a, b, c）
        # db.user.find({hobby: {$all: [a, b, c]})
    
    # 模糊查询（正则表达式）
        查询 title 包含"教"字的文档：

        db.col.find({title:/教/})
        查询 title 字段以"教"字开头的文档：

        db.col.find({title:/^教/})
        查询 titl e字段以"教"字结尾的文档：

        db.col.find({title:/教$/})

    # $where 和 $regex
        # db.user.find({$where: "this.goods_price > 200"})
        # db.user.find({goods_name: {$regex: /^零食.*/}}, {goods_name:1, _id: 0})

    # $type 操作符
        $type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。

        # MongoDB 中可以使用的类型如下表所示：

        类型	                数字	备注
        Double	                1	 
        String	                2	 
        Object	                3	 
        Array	                4	 
        Binary data	            5	 
        Undefined	            6	    已废弃。
        Object id	            7	 
        Boolean	                8	 
        Date	                9	 
        Null	                10	 
        Regular Expression	    11	 
        JavaScript	            13	 
        Symbol	                14	 
        JavaScript (with scope)	15	 
        32-bit integer	        16	 
        Timestamp	            17	 
        64-bit integer	        18	 
        Min key	                255	    Query with -1.
        Max key	                127

        # 栗子
            如果想获取 "col" 集合中 title 为 String 的数据，你可以使用以下命令：

            db.col.find({"title" : {$type : 2}})
            或
            db.col.find({"title" : {$type : 'string'}})
            
# ...未完（https://www.runoob.com/mongodb/mongodb-limit-skip.html）

## pymongo

    # update_one or update_many：
    # return.matched_count: 匹配数
    # return.modified_count: 修改数

    # delete_one or delete_many:
    # return.deleted_count: 删除数目
    # db.col.count_documents({name: "Miman"}): 统计符合条件的数目

