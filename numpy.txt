# 安装: pip3 install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple

# 简介
    NumPy 是一个 Python 库，部分用 Python 编写，但是大多数需要快速计算的部分都是用 C 或 C ++ 编写的。

    一个用python实现的科学计算，包括：
    1、一个强大的N维数组对象Array
    2、比较成熟的（广播）函数库
    3、用于整合C/C++和Fortran代码的工具包
    4、实用的线性代数、傅里叶变换和随机数生成函数。
    numpy和稀疏矩阵运算包scipy配合使用更加方便。
    NumPy（Numeric Python）提供了许多高级的数值编程工具，
    如：矩阵数据类型、矢量处理，以及精密的运算库。专为进行严格的数字处理而产生。
    多为很多大型金融公司使用，以及核心的科学计算组织
    如：Lawrence Livermore，NASA用其处理一些本来使用C++，Fortran或Matlab等所做的任务。
    
    - numpy中一切皆矩阵
    - 用numpay的array存储的数组比python存储的数组少占一半多的内存空间

# 使用
    import numpy as np
    
    - ndarray
        - n维数组(n dimension array),本质上是优化后的python列表
        - numpy默认ndarray的所有元素类型是相同的
        - 如果列表中包含不同类型数据，则自动处理成同一类型，优先级：str>float>int
    
    - 一维数组
        arr1 = np.array([1,2,3])
        arr1 = np.array(range(10))
        arr1.dtype  # >>dtype('int64')  # 数据类型
        arr1.size  # 数组长度
        
    - 二维数组
        arr2 = np.array([[1,2,3], [4,5,6]])
        arr2 = np.array([[range(3), [1,3,6]])
        arr2.dtype  # >>dtype('int64')
        arr2.size  # >>6
        arr2.shape  # (2,3)  # 2行3列
        arr2[0][0] == arr2[0,0]
    
    - 三维数组
        arr3 = np.array([[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]]])
        arr3.shape  # >>(4,2,3)
        arr3 = np.arange(15).reshape((3,5))  # 返回3行5列的二维数组
        
# 拓展(必会)
    - 两个大小相同的数组可做数学运算
    - 函数
        - np.array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0,like=None): 将列表转换为数组，可选择显示指定dtype
        - np.arange([start,] stop[, step,], dtype=None, *, like=None): range的numpy版，支持浮点数  # np.arange(1, 11, 0.2)
        - np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None): 类似arange(),第三个参数为数组长度
            - endpoint
                - 是否显示最后一个点
            - restep
                - restep = True时，返回的数据是个元组(array([分割后的各个点], 每两个点间的间距))
            - dtype
                - np.int16
                - np.int32
                - np.float16
                - np.float32
        - np.zeros(shape, dtype): 根据指定形状和dtype创建全0数组
        - np.ones(shape, dtype=None, order='C'): 根据指定形状和dtype创建全1数组
        - np.empty(shape, dtype=float, order='C', *, like=None): 根据指定形状和dtype创建空数组（随机值，某个程序弃用的内存空间）
        - np.eye(N, M=None, k=0, dtype=float): 根据指定边长和dtype创建单位矩阵(对角线全1，其他全0)
            - k=0: 对角线不偏移
            - k=-1: 对角线向下偏移一个单位
        - np.full(shape, fill_value, dtype=None, order='C')
        - np.random.randint(low, high=None, size=None, dtype='l')
        - np.random.normal(loc=0.0, scale=1.0, size=(3,5))  # 正态分布
            - loc: 平均值，默认0
            - scale: 方差，默认1
            - 例：np.random.normal(loc=10, scale=3, size=(3,5)).mean()
                - .mean(): 取平均值
                - .std(): 取方差
        - np.random.randn(d0, d1, ..., dn)  # 标准正态分布
            - d0,d1,...,dn: 表示维度 
        - np.random.random(size=(3,5,3))  # 生成三维(3,5,3)的随机数
        - np.random.rand(d0, d1, ..., dn)  # 功能和random一样，写法不一样
    - 属性
        - ndim: 数组的维数
        - T: 数组转置(对高维数组而言)
        - shape: 形状(各维度的长度)
        - size: 总长度
        - dtype: 元素类型


# 数据反转,例如[1,2,3] ==> [3,2,1]
    - d1 = np.random.randint(1, 100, size=(3,5))
        - d1[::-1]  # 行反转
        - d1[:, ::-1]  # 列反转
        - d1[::-1, ::-1]  # 行列都反转


# 变形
    - d1 = np.random.randint(1, 100, size=(3,5))
        - np.reshape(d1, newshape=(5,3))  # 用的少
        - d1.reshape(5,3)
        
        
# 级联
    - 将几组相似（行相同、列相同等）的数据连接起来
    - 水平(horizontal)级联
        d1 = np.random.randint(1, 100, size=(3,5))
        d2 = np.random.randint(1, 100, size=(3,6))
        np.concatenate((d1,d2), axis=1)  # 用的少
        np.hstack((d1,d2))
        
    - 垂直(vertical)级联
        d1 = np.random.randint(1, 100, size=(5,6))
        d2 = np.random.randint(1, 100, size=(3,6))
        np.concatenate((d1,d2), axis=0)  # 用的少
        np.vstack((d1,d2))


# 索引
    arr1 = [1,2,3,4,5]
    arr2 = arange(20).reshape((4,5))
    arr3 = arange(27).reshape((3,3,3))
    
    - 普通索引
        arr1[0]
        arr2[0,1] == arr2[0][1]
        arr3[0,1,2] == arr3[0][1][2]
        
    - 花式索引
        arr2[0,arr2[0]>2]  # 索引arr2第0个并且arr2[0]中大于2的元素
        arr2[[1,3],:][:,[1,3]]  # 取第2行和第4行，再取第2列和第4列，不能写成arr2[[1,3],[1,3]],会解释成[1,1]和[3,3]
    
# 切片
    arr1 = np.random.randint(0, 100, size=(5,6))
    - split
        np.split(arr1, [2,4], axis=0)  # 垂直切出2,4行
        np.split(arr1, [2,4], axis=1)  # 水平切出2,4行
    
    - vsplit && hsplit
        np.vsplit(arr1, [2,4])  # 垂直切出2,4行
        np.hsplit(arr1, [2,4])  # 水平切出2,4行
    
    - arr2 = [[1,2,3],[1,2,3]]
        arr2[0]  # >>[1,2,3]
        arr2[0:2, 0:2]  # >>[[1,2],[1,2]]  # 第一个0:2是切0到1行，第二个0:2是切0到1列


# 聚合
	arr1 = np.random.randint(0, 100, size=(4,5))
	arr1.sum()  # axis=None 表示所有的维度都聚合成0维
	
	arr1.sum(axis=0)  # axis=0 表示对行进行聚合操作
	arr1.sum(axis=1)  # axis=1 表示对列进行聚合操作


# 过滤
    - 大于
        arr1 = [1,2,3,4,5]
        arr1[arr1>3]  # 选出arr1中大于3的数
        - 底层原理
            arr1[arr1>3] == arr1[[False, False, False, True, True]]
            因为arr1>3返回的是[False, False, False, True, True]
            所以过滤数据时要传入和列表元素个数相同的bool列表
            
    - 大于且偶数
        arr1 = [1,2,3,4,5]
        arr1[(arr1>3) & (arr1%2==0)]
        
    - 大于或偶数
        arr1 = [1,2,3,4,5]
        arr1[(arr1>3) | (arr1%2==0)]
        
# 常见通用函数
    - 一元函数
        - abs  # 绝对值运算
            np.abs(np.arange(-5,5))
            
        - sqrt  # 开方
            np.sqrt(np.arange(5))
            
        - exp  # 指数运算
            
        - log  # 对数运算
            
        - ceil  # 向上取整
            np.ceil(-1.6)  # >>-1
            np.ceil(1.6)  # >>2
            
        - floor  # 向下取整
            np.floor(-1.6)  # >>-2
            np.floor(1.6)  # >>1
            
            - 拓展
                python的int是向中间取整
                python的round是向两边取整，但关于n.5的取整是偶进奇不进
        - rint
            np.rint(np.array([-2.5,-1.5,-0.5,0,0.5,1.5,2.5]))  # >>array([-2., -2., -0.,  0.,  0.,  2.,  2.])
            和round一样
            
        - trunc
            np.trunc(np.array([-2.5,-1.5,-0.5,0,0.5,1.5,2.5]))  # >>array([-2., -1., -0.,  0.,  0.,  1.,  2.])
            和int一样
            
        - modf
            np.modf(np.array([-2.5,-1.5,-0.5,0,0.5,1.5,2.5]))  # >>(array([-0.5, -0.5, -0.5,  0. ,  0.5,  0.5,  0.5]),array([-2., -1., -0.,  0.,  0.,  1.,  2.]))
            将整数和小数部分分开
            
        - isnan
            对负数开根会出现nan
            np.nan != np.nan
            np.isnan([float('nan'),1,2,3])  # >>array([ True, False, False, False])
            arr1 = array([nan,  1.,  1.,  1.,  1.])
            arr1[~np.isnan(arr1)]  # 取出非nan的元素,不能这么写arr1[arr1 != np.nan]
            - 补充，浮点数特殊值
                nan(Not a Number): 不等于任何浮点数（nan != nan）
                inf(infinity): 比任何浮点数都大，float('inf') > 10000000000  # >>True
                NumPy中创建特殊值: np.nan np.inf
                在数据分析中，nan常被用作表示数据缺失
                ##### python中
                    float('nan')  # >>nan
                    float('inf')  # >>inf
        - isinf
            除数为0会出现inf
            np.inf == np.inf
            np.isinf([float('inf'),1,2,3])  # >>array([ True, False, False, False])
            arr1[~np.isiinf(arr1)]  # 取出非inf的元素，也可以这么写arr1[arr1 != np.inf]
        - cos
        
        - sin
        
        - tan
        
    - 二元函数
        - add
        
        - substract
        
        - multiply
        
        - divide
        
        - power
        
        - mod
        
        - maximum
            - 取最大
            np.maximum(np.arange(1,5), np.arange(3, 7))  # >>array([3, 4, 5, 6])
        - minimum
            - 取最小
            np.minimum(np.arange(1,5), np.arange(3, 7))  # >>array([1, 2, 3, 4])
            
    - 数学和统计方法
        - sum
            - 求和
            np.sum(arr1)
        - mean
            - 取平均值
            np.mean(arr1)
        
        - var
            - 求方差
            np.var(arr1)
            - 方差，表示一组数据的离散程度
                1,2,3,4,5
                mean: 3
                方差: ((1-mean)**2 + (2-mean)**2 + (3-mean)**2 + (4-mean)**2 + (5-mean)**2)/5
        - std
            - 求标准差
            np.std(arr1)
            标准差是方差的开根结果
        - min
            - 求最小值
        - max
            - 求最大值
        - argmin
            - 求最小值索引
        - argmax
            - 求最大值索引
            
    - 随机数生成
        随机数函数在np.random子包内，使用时：np.random.[点方法]
        - rand     给定形状产生随机数组（0到1之间的数）
        - randint  给定形状产生随机整数
            - 用1-10随机数生成指定二维数组
            np.random.randint(1,10,(3,5))
        - choice   给定形状产生随机选择
            - 用给定一组数据生成指定二维数组
            np.random.choice([1,2,3,4,5],(3,5))
        - shuffle  与random.shuffle相同，打乱
        - uniform  给定形状产生随机浮点数










       
    
    








