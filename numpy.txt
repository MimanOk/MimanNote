# 安装: pip3 install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple

# 简介
    NumPy 是一个 Python 库，部分用 Python 编写，但是大多数需要快速计算的部分都是用 C 或 C ++ 编写的。

    一个用python实现的科学计算，包括：
    1、一个强大的N维数组对象Array
    2、比较成熟的（广播）函数库
    3、用于整合C/C++和Fortran代码的工具包
    4、实用的线性代数、傅里叶变换和随机数生成函数。
    numpy和稀疏矩阵运算包scipy配合使用更加方便。
    NumPy（Numeric Python）提供了许多高级的数值编程工具，
    如：矩阵数据类型、矢量处理，以及精密的运算库。专为进行严格的数字处理而产生。
    多为很多大型金融公司使用，以及核心的科学计算组织
    如：Lawrence Livermore，NASA用其处理一些本来使用C++，Fortran或Matlab等所做的任务。

# 使用
    import numpy as np
    
    # 一维数组
        arr1 = np.array([1,2,3])
        arr1 = np.array(range(10))
        arr1.dtype  # >>dtype('int64')  # 数据类型
        arr1.size  # 数组长度
        
    # 二维数组
        arr2 = np.array([[1,2,3], [4,5,6]])
        arr2 = np.array([[range(3), [1,3,6]])
        arr2.dtype  # >>dtype('int64')
        arr2.size  # >>6
        arr2.shape  # (2,3)  # 2行3列
        arr2[0][0] == arr2[0,0]
    
    # 三位数组
        arr3 = np.array([[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]]])
        arr3.shape  # >>(4,2,3)
        arr3 = np.arange(15).reshape((3,5))  # 返回3行5列的二维数组
        
# 拓展
    # 两个大小相同的数组可做数学运算
    # T: 数组转置(对高维数组而言)
    # ndim: 数组的维数
    # array(): 将列表转换为数组，可选择显示指定dtype
    # arange(): range的numpy版，支持浮点数  # np.arange(1, 11, 0.2)
    # linspace(): 类似arange(),第三个参数为数组长度
    # zeros(): 根据指定形状和dtype创建全0数组
    # ones(): 根据指定形状和dtype创建全1数组
    # empty(): 根据指定形状和dtype创建空数组（随机值，某个程序弃用的内存空间）
    # eye(): 根据指定边长和dtype创建单位矩阵(对角线全1，其他全0)
    
    ## linspace
        np.linspace(0, 100, 101)  # 将[0-100]，注意左右闭区间，的数分成101份，每份间隔相同

# 索引
    arr1 = [1,2,3,4,5]
    arr2 = arange(20).reshape((4,5))
    arr3 = arange(27).reshape((3,3,3))
    
    ## 普通索引
        arr1[0]
        arr2[0,1] == arr2[0][1]
        arr3[0,1,2] == arr3[0][1][2]
        
    ## 花式索引
        arr2[0,arr2[0]>2]  # 索引arr2第0个并且arr2[0]中大于2的元素
        arr2[[1,3],:][:,[1,3]]  # 取第2行和第4行，再取第2列和第4列，不能写成arr2[[1,3],[1,3]],会解释成[1,1]和[3,3]
    
# 切片
    # arr2 = [[1,2,3],[1,2,3]]
        arr2[0]  # >>[1,2,3]
        arr2[0:2, 0:2]  # >>[[1,2],[1,2]]  # 第一个0:2是切0到1行，第二个0:2是切0到1列
        
# 过滤
    ## 大于
        arr1 = [1,2,3,4,5]
        arr1[arr1>3]  # 选出arr1中大于3的数
        ### 底层原理
            arr1[arr1>3] == arr1[[False, False, False, True, True]]
            因为arr1>3返回的是[False, False, False, True, True]
            所以过滤数据时要传入和列表元素个数相同的bool列表
            
    ## 大于且偶数
        arr1 = [1,2,3,4,5]
        arr1[(arr1>3) & (arr1%2==0)]
        
    ## 大于或偶数
        arr1 = [1,2,3,4,5]
        arr1[(arr1>3) | (arr1%2==0)]
        
# 常见通用函数
    ## 一元函数
        ### abs  # 绝对值运算
            np.abs(np.arange(-5,5))
        ### sqrt  # 开方
            np.sqrt(np.arange(5))
        ### exp  # 指数运算
            
        ### log  # 对数运算
            
        ### ceil  # 向上取整
            np.ceil(-1.6)  # >>-1
            np.ceil(1.6)  # >>2
        ### floor  # 向下取整
            np.floor(-1.6)  # >>-2
            np.floor(1.6)  # >>1
            
            #### 拓展
                python的int是向中间取整
                python的round是向两边取整，但关于n.5的取整是偶进奇不进
        ### rint
            np.rint(np.array([-2.5,-1.5,-0.5,0,0.5,1.5,2.5]))  # >>array([-2., -2., -0.,  0.,  0.,  2.,  2.])
            和round一样
        ### trunc
            np.trunc(np.array([-2.5,-1.5,-0.5,0,0.5,1.5,2.5]))  # >>array([-2., -1., -0.,  0.,  0.,  1.,  2.])
            和int一样
        ### modf
            np.modf(np.array([-2.5,-1.5,-0.5,0,0.5,1.5,2.5]))  # >>(array([-0.5, -0.5, -0.5,  0. ,  0.5,  0.5,  0.5]),array([-2., -1., -0.,  0.,  0.,  1.,  2.]))
            将整数和小数部分分开
        ### isnan
            对负数开根会出现nan
            np.nan != np.nan
            np.isnan([float('nan'),1,2,3])  # >>array([ True, False, False, False])
            arr1 = array([nan,  1.,  1.,  1.,  1.])
            arr1[~np.isnan(arr1)]  # 取出非nan的元素,不能这么写arr1[arr1 != np.nan]
            #### 补充，浮点数特殊值
                nan(Not a Number): 不等于任何浮点数（nan != nan）
                inf(infinity): 比任何浮点数都大，float('inf') > 10000000000  # >>True
                NumPy中创建特殊值: np.nan np.inf
                在数据分析中，nan常被用作表示数据缺失
                ##### python中
                    float('nan')  # >>nan
                    float('inf')  # >>inf
        ### isinf
            除数为0会出现inf
            np.inf == np.inf
            np.isinf([float('inf'),1,2,3])  # >>array([ True, False, False, False])
            arr1[~np.isiinf(arr1)]  # 取出非inf的元素，也可以这么写arr1[arr1 != np.inf]
        ### cos
        
        ### sin
        
        ### tan
        
    ## 二元函数
        ### add
        
        ### substract
        
        ### multiply
        
        ### divide
        
        ### power
        
        ### mod
        
        ### maximum
            # 取最大
            np.maximum(np.arange(1,5), np.arange(3, 7))  # >>array([3, 4, 5, 6])
        ### minimum
            # 取最小
            np.minimum(np.arange(1,5), np.arange(3, 7))  # >>array([1, 2, 3, 4])
            
    ## 数学和统计方法
        ### sum
            # 求和
            np.sum(arr1)
        ### mean
            # 取平均值
            np.mean(arr1)
        
        ### var
            # 求方差
            np.var(arr1)
            #### 方差，表示一组数据的离散程度
                1,2,3,4,5
                mean: 3
                方差: ((1-mean)**2 + (2-mean)**2 + (3-mean)**2 + (4-mean)**2 + (5-mean)**2)/5
        ### std
            # 求标准差
            np.std(arr1)
            标准差是方差的开根结果
        ### min
            # 求最小值
        ### max
            # 求最大值
        ### argmin
            # 求最小值索引
        ### argmax
            # 求最大值索引
            
    ## 随机数生成
        随机数函数在np.random子包内，使用时：np.random.[点方法]
        # rand     给定形状产生随机数组（0到1之间的数）
        ## randint  给定形状产生随机整数
            # 用1-10随机数生成指定二维数组
            np.random.randint(1,10,(3,5))
        # choice   给定形状产生随机选择
            # 用给定一组数据生成指定二维数组
            np.random.choice([1,2,3,4,5],(3,5))
        # shuffle  与random.shuffle相同，打乱
        # uniform  给定形状产生随机浮点数










       
    
    








