## 重点基础篇
    # python -m  # m: manger
    # set()
        集合中的元素要和dict的key一样可hash
        se = set(["a", "b"])  # set(里面只能有一个可迭代元素)
        # remove 和 discard功能都是删除集合中的元素，但是
            集合中不存在要删除的元素时
                remove  会报错
                discard 不会
        交集符号：&
        并集符号：|
    
    # while可以和else搭配
    
    # 没有元组推导式，(for i in range(1, 11, 1)):这是生成器
    
    # 函数参数的定义顺序必须是：必选参数、默认参数、可变参数、关键字参数
    
    # 常见字符串类方法(以下操作均不改变字符串本身)
        str = "Miman"
        str.find("m")  # >>2
        str.find("ma", 0, len(str)  # >>3
        str.index("m")  # >>2
        str.replace("m", "M")  # >>"MiMan"
        str.split("m")  # ["Mi", "an"]
        str.startswith("m")  # False
        str.endswith("m")  # False
        str.lower()  # "miman"
        str.upper()  # "MIMAN"
        "  Mi  man  ".strip()  # "Mi  man"
        "  Mi  man  ".rstrip()  # "  Mi  man"
        "  Mi  man  ".lstrip()  # "Mi  man  "
        str.isalpha()  # True
        str.isdigit()  # False
        "Mi888".isalnum()  # True  # 字母数字组合
        
    # reduce()
        from functools import reduce
        def jiecheng(x, y)
            return x * y
        print(reduce(jiecheng, range(1, 6)))  # >>120
        
    # lambda作为函数返回值时需注意
        def miman(x, y):
            return lambda: x * Y
        print(miman(2, 3)())  # >>6
        
    # 闭包装饰器
        概念:
            1.在一个外函数中定义一个内函数
            2.内函数中运用了外函数的临时变量
            3.外函数的返回值是内函数的引用
        例:
            def wai(arg1):
                print("---1---")
                def nei(arg2):
                    print("---2---")
                    return arg1 + arg2
                print("---3---")
                return nei
            f1 = wai(10)  # arg1 = 10, f1 = nei
            f2 = f1(20)  # f2 = nei(20)
            print(f2)
                # >>---1---
                # >>---3---
                # >>---2---
                # >>30
        
        # @装饰器(语法糖)
            def fu(arg1):
                print("---1---")
                def zi(arg2):
                    print("---2---")
                    def sun(arg3):
                        arg2(arg3)
                        print("---3---")
                        if arg1 == "0":
                            print("数字：%s，验证失败！" % (arg1, ))
                            return None
                        else:
                            print("数字：%s，验证成功！" % (arg1, ))
                            return int(arg1) * arg3
                    return sun
                return zi
                
            @fu(input("请输入验证数字："))
            def miman1(arg3):
                print("miman1 run, arg=%s" % (arg3, ))
            res = miman1(3)
            print(res)
            # >>请输入验证数字：2
            # >>---1---
            # >>---2---
            # >>miman1 run , arg=3
            # >>---3---
            # >>数字：2，验证成功！
            # >>6
            注：id(miman1) == id(sun)
            
    # 属性装饰器
        # 用法一:
            class Miman(object):
                """ author Miman """
                
                __name = "Miman"
                
                @property  # 默认getter方法
                def name(self):
                    return self.__name
                    
                @name.setter
                def name(self, name):
                    self.__name = name
                    
                @name.deleter
                def name(self):
                    del self.__name
                    print("del name success!")
            mi = Miman()
            mi.name  # >>"Miman"
            mi.name = "MimanOk"
            mi.name  # >>"MimanOk"
            del mi.name  # >>del name success! (注意：只能删除自己设置的，类中原来的类属性(静态属性)删不掉，不管是不是私有属性)
            
        # 用法二:
            class Miman(object):
                """ author Miman """
                
                __name = "Miman"
                
                def getter(self):  # 名称随意
                    return self.__name
                    
                def setter(self, name):  # 名称随意
                    self.__name = name
                    
                def deleter(self):  # 名称随意
                    del self.__name
                    print("del name success!")
                    
                name = property(fget=getter, fset=setter, fdel=deleter)
                
            mi = Miman()
            mi.name  # >>"Miman"
            mi.name = "MimanOk"
            mi.name  # >>"MimanOk"
            del mi.name  # >>del name success!
            
    # PyCharm实用快捷键
        替换查找
            1.ctrl+r:替换
            2.ctrl+F:查找
            3.ctrl+shift+F:全局查找
            4.ctrl+shift+R:全局替换
            5.ctrl+shift+i:快捷查看方法实现的内容
            6.ctrl+p:查看参数
            7.ctrl+Q:查看文档描述
            8.shift+F1:查看api文档
            9.ctrl+F12:查看类的方法
            10.ctrl+H:查看类的继承关系
            ...
            13.ctrl+alt+H:查看方法在那里被调用了
            14.ctrl+{}:可以定位方法体的括号
            15.F3:查看选中的内容
            16.shift+F3:反向查看内容
            17.ctrl+alt+B:查询那些类实现了光标所在的接口
            18.ctrl+U:查看父类
            19.ctrl+E:最近编辑的文件列表
            20.ctrl+alt+home:查看布局与对应的类
        光标操作
            1.ctrl+alt+enter:向上插入
            2.shift+enter:向下插入
        操作代码
            1.ctrl+d:复制粘贴一行
            2.ctrl+y:删除一行
        组合快捷键
            1.F2:定位错误
            2.alt+enter:修正错误
        格式代码及其他功能
            1.ctrl+alt+L:格式代码
        编辑的位置
            ctrl+alt+左右键
    # 内存回收
        # 引用计数
            Python中的内存管理通过跟踪特定对象的“引用”数量，然后在该计数达到零时释放该对象的内存来工作。
            当您PyObject从函数返回a时，可能要Py_INCREF在其上运行以增加引用计数，以及在其中创建新对象时，
            不想返回Py_DECREF的函数，应该在函数返回之前运行它（即使执行失败），以免导致内存泄漏。
            解释此系统的文档 提出一个重要的意见，即是否在返回对象之前增加对象的引用计数，这是每个函数
            的“接口规范”的一部分。考虑到这一点，您需要仔细跟踪哪些功能可以执行操作，否则内存使用可能会
            变得有些难看。
    

# strip
  "".strip("想去掉的内容，包括换行:\r\n")  # 去掉字符串右边的空格，参数是想另外想去掉的内容
  

# yield from
    # python3.3才出现yield from语法，python2中没有
    # yield from 后面跟可迭代对象，可以是普通的可迭代对象，也可以是迭代器，甚至是生成器。
    
    # 示例1
        def demo1(data):
            for i in data:
                yield i

        def demo2(data):
            yield from data

        print(list(demo1("Miman")))  # >>['M', 'i', 'm', 'a', 'n']
        print(list(demo2("Miman")))  # >>['M', 'i', 'm', 'a', 'n']
    
    # 示例2
        # 子生成器
        def demo1():
            result = 0
            while True:
                receive = yield result
                if receive is None: break
                receive += 1
                result = receive

        # 委托生成器
        def demo2():
            while True:
                res = yield from demo1()
                # 委托生成器不会拦截demo1正常生成的数据，只是打开了双通道
                # 只有子生成器要结束（return）了，yield from左边的变量才会被赋值，后面的代码才会执行。
                print("demo2 res: %s" % res)

        # 调用方
        def main():
            demo = demo2()
            first_res = next(demo)  # 激活生成器
            print("next: %s" % first_res)
            print("main receive: %s" % demo.send(1))
            print("main receive: %s" % demo.send(None))

        if __name__ == '__main__':
            main()
            
        # output
            >>next: 0
            >>main receive: 2
            >>demo2 res: None
            >>main receive: 0
    # 总结
        # yield from常用来代替内层for循环 与 打开双通道
        # 但是大部分情况下yield from并不单独使用，而是伴随着asyncio库使用，实现异步操作
        # 从Python 3.5开始引入了新的语法 async 和 await ，而await替代的就是yield from
        （为了不与实现内层for循环的yield from误解）
  

# 线程、进程、协程
    # 路径env python版本，可以动态的切换python版本
    # python 的多线程是利用的CPU上下文切换，同一时刻只在一个核上进行操作，实质上还是单线程。
    # python 的IO操作不占用CPU，计算占用CPU。所以python多线程适合密集型IO任务，不适合密集型CPU任务。
    # 线程的进程ID是离发起该线程最近的进程ID，其父进程ID是运行程序员代码的主进程ID
        # 编译器进程（PPID=None，PID=0）### 运行代码进程（PPID=0, PID=1）### 程序员发起进程（PPID=1, PID=2）### A线程（PID=1, PID=2）### D线程（PID=1, ID=2）

# 线程间通信
    # 用queue模块中的Queue实例化一个q然后对该q操作，进程能和其线程能共享q
    如果q中put了很多数据共线程get,那么在线程join前要先使用q.join()来使队列清空。
    通知队列，数据已经处理，可以删除了
        # q.task_done()
    # 打印队列长度
        # q.qsize()

# 进程通信用multiprocessing模块中的Queue实例化一个q（父进程克隆出的q）然后要把q传给子进程才能都对q操作，实质上是数据的传递，不是共享数据
# 要实现进程间数据共享，使用multiprocessing模块中的Manager实例化一个共享空间m，通过其中的m.list(...), m.dict(...)等数据类型来实现数据共享
# 管道通信用multiprocessing模块中的Pipe实例化两个通信的端口A、B，可以通过端口A.send()发也能A.recv()收，B和A一样
# multiprocessing模块中的进程锁Lock，用处1：防止多个进程同时占用屏幕，用法和线程锁类似，线实例化一把锁lock，再lock.acquire()和lock.release()
# 启用一个进程会克隆父进程的数据给子进程用，开销很大，因此有进程池来限制
# 进程池：multiprocessing模块中的Pool，实例化对象pool时可在Pool中传入一个最大进程数，pool的异步async方法可以传入回调函数
    # 注意：最后必须要先加pool.close()再加pool.join()，顺序不能颠倒
    
    Process()类实例化的进程p独立于主进程，不会因主进程结束而退出。
    Pool()类实例化进程池依赖于主进程，主进程退出，进程池立即退出。


# 递归锁
    import time
    from threading import RLock, Thread

    def f1(lockA, lockB):
        lockA.acquire()
        print("f1 抢到A锁")
        time.sleep(1)
        lockB.acquire()
        print("f1 抢到B锁")
        lockB.release()
        lockA.release()

    def f2(lockA, lockB):
        lockB.acquire()
        print("f2 抢到B锁")
        time.sleep(1)
        lockA.acquire()
        print("f2 抢到A锁")
        lockA.release()
        lockB.release()

    if __name__ == '__main__':
        # lockA = Lock()
        # lockB = Lock()
        lockA = lockB = RLock()  # 递归锁，维护一个计数器，acquire一次就加一，release一次就减一
        t1 = Thread(target=f1, args=(lockA, lockB))
        t2 = Thread(target=f2, args=(lockA, lockB))
        t1.start()
        t2.start()

   
# 守护线程
    等待所有非守护线程的结束才结束。
    用Thread实例化对象th，th.Daemon = True,来将子线程设置为守护线程。注意要在start之前设置
    
# 守护进程
    主进程代码执行结束，守护进程随之结束。
    用Process实例化对象p，p.Daemon = True,来将子进程设置为守护进程。注意要在start之前设置
    
# 自定义进程：
    class MyProcess(Process)  #继承Process类
        def __init__(self, *args, **kwargs):
            # 需要出入初始化参数时添加__init__函数
            super(MyProcess, self).__init__()
            self.args = args
        def run(self):
            # do you want
            psss
            
# 自定义线程：
    # 自定义线程与自定义进程的区别在于继承的是Thread父类
    
# 创建线程锁时要避免死锁(分配任务不当会造成死锁)，即A线程使用B锁后未释放就交出CPU执行权并进行IO操作，
    同时B线程使用A锁后未释放也交出CPU执行权并进行IO操作。这时A线程处理完IO操作进入等待队列并获取CPU执行权，
    A线程又想使用A锁，但A锁被B线程占用，只被迫能阻塞等待。更巧的是B线程拿到CPU执行权后又想去使用B锁，
    此时B锁被A线程占用，B线程也被迫阻塞等待。那么，现在AB线程都处于阻塞等待状态，如果不在acquire请求锁时
    添加超时参数，那么两个线程将一直阻塞，造成死锁。

# 协程：
    # greenlet：手动的
    from greenlet import greenlet
        ga = greenlet(func_a)  # func_a:有IO操作的函数
        gb = greenlet(func_b)  # func_b:有IO操作的函数
    在func_a进行IO操作的代码上使用gb.switch()切换到func_b函数，func_b函数同理

    # gevent: 自动的
    import gevent
    from gevent import monkey
    monkey.fatch_all()  # 猴子补丁
    ...
    ga = gevent.spawn(func_a, args)
    gb = gevent.spawn(func_b, args)
    ga.join()
    gb.join()
    
# 协程并发1
    import anyncio
    
    async def eat(food):
        for i in range(1, 3 + 1):
            print("eating {food:<5}".format(food=food))
            await asyncio.sleep(3)

    pool = asyncio.get_event_loop()
    eat1 = eat("辣条")
    eat2 = eat("包子")
    eat3 = eat("烤鸡")

    task = [
        asyncio.ensure_future(eat1),
        asyncio.ensure_future(eat2),
        asyncio.ensure_future(eat3),
    ]

    pool.run_until_complete(asyncio.wait(task))


# 协程并发2
    pool = asyncio.get_event_loop()
    pool.run_until_complete(asyncio.wait([eat(food) for food in {"烤鸡", "包子", "辣条"}]))


# 一个异步io(协程)实例
    import ansycio
    class Downloader(object):
        """
        一个异步下载器，可以对代理源异步抓取，但是容易被BAN。
        """

        def __init__(self, urls):
            self.urls = urls
            self._htmls = []

        async def download_single_page(self, url):
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    self._htmls.append(await resp.text())

        def download(self):
            loop = asyncio.get_event_loop()
            tasks = [self.download_single_page(url) for url in self.urls]
            loop.run_until_complete(asyncio.wait(tasks))

        @property
        def htmls(self):
            self.download()
            return self._htmls


# requests
    # 对于保存响应数据较大的情况(如视频)，应一点一点的对其进行保存：
    for chunk in response.iter_content(1024):
        f.write(chunk)

# http://httpbin.org/ip          # 请求获取ip
# http://httpbin.org/cookies     # 请求获取cookie

# 安装pip
    # python -m pip install pip==9.0.3
    # 清华镜像源
        pip3 install -r requirement.txt -i https://pypi.tuna.tsinghua.edu.cn/simple
    # 阿里镜像源
        pip3 install -r requirement.txt -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com

# 配置虚拟环境
    # 1. pip install virtualenv ##virtualenv venv_name ##cd venv_name ##activate.bat ##deactivate.bat
    # 2. python -m venv path\venv_name ##同#1

# 爬虫去重策略
    # 将访问过的url经md5哈希后保存到set中
    # bloomfilter方法对bitmap（将一条数据通过hash映射到某一位，非常节省内存，但冲突严重）进行改进，多重哈希函数降低冲突


# 判断是否以Miman字符串开头："MimanOk".startswith("Miman")
# 判断是否以Miman字符串结尾："OkMiman".endswith("Miman")

# 移除网页标签
    # from w3llib.html import remove_tags ##remove_tags("str")


# 断言assert
    assert expression
    等价于：
        if not expression:
            raise AssertionError
    assert 后面也可以紧跟参数:

    assert expression [, arguments]
    
    等价于：
        if not expression:
            raise AssertionError(arguments)
    以下为 assert 使用实例：

    >>> assert True     # 条件为 true 正常执行
    >>> assert False    # 条件为 false 触发异常
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AssertionError
    >>> assert 1==1    # 条件为 true 正常执行
    >>> assert 1==2    # 条件为 false 触发异常
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AssertionError

    >>> assert 1==2, '1 不等于 2'
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AssertionError: 1 不等于 2


# pickle
    try:
        import cPickle as pickle
    except ImportError:
        import pickle
        
    def loads(str):
    return pickle.loads(str)
    
    def dumps(obj):
        return pickle.dumps(obj, protocol=#1)


# __slots__
    class A():
        "允许该类中存在的属性"
        __slots__ = ("允许的属性1", 允许的属性2)


# cookiejar登录知乎
    import re
    import requests
    import http.cookiejar
    from PIL import Image
    import time
    import json
     
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 '
                             '(KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36',
               "Host": "www.zhihu.com",
               "Referer": "https://www.zhihu.com/",
               }
    # 建立一个会话，可以把同一用户的不同请求联系起来；直到会话结束都会自动处理cookies
    session = requests.Session()
    # 建立LWPCookieJar实例，可以存Set-Cookie3类型的文件。
    # 而MozillaCookieJar类是存为'/.txt'格式的文件
    session.cookies = http.cookiejar.LWPCookieJar("cookie")
    # 若本地有cookie则不用再post数据了
    try:
        session.cookies.load(ignore_discard=True)
    except IOError:
        print('Cookie未加载！')
     
     
    def get_xsrf():
        """
        获取参数_xsrf
        """
        response = session.get('https://www.zhihu.com', headers=headers)
        html = response.text
        get_xsrf_pattern = re.compile(r'<input type="hidden" name="_xsrf" value="(.*?)"')
        _xsrf = re.findall(get_xsrf_pattern, html)[0]
        return _xsrf
     
     
    def get_captcha():
        """
        获取验证码本地显示
        返回你输入的验证码
        """
        t = str(int(time.time() * 1000))
        captcha_url = 'http://www.zhihu.com/captcha.gif?r=' + t + "&type=login"
        response = session.get(captcha_url, headers=headers)
        with open('cptcha.gif', 'wb') as f:
            f.write(response.content)
        # Pillow显示验证码
        im = Image.open('cptcha.gif')
        im.show()
        captcha = input('本次登录需要输入验证码： ')
        return captcha

     
    def login(username, password):
        """
        输入自己的账号密码，模拟登录知乎
        """
        # 检测到11位数字则是手机登录
        if re.match(r'\d{11}$', username):
            url = 'http://www.zhihu.com/login/phone_num'
            data = {'_xsrf': get_xsrf(),
                    'password': password,
                    'remember_me': 'true',
                    'phone_num': username
                    }
        else:
            url = 'https://www.zhihu.com/login/email'
            data = {'_xsrf': get_xsrf(),
                    'password': password,
                    'remember_me': 'true',
                    'email': username
                    }
        # 若不用验证码，直接登录
        result = session.post(url, data=data, headers=headers)
        # 打印返回的响应，r = 1代表响应失败，msg里是失败的原因
        # loads可以反序列化内置数据类型，而load可以从文件读取
        if (json.loads(result.text))["r"] == 1:
            # 要用验证码，post后登录
            data['captcha'] = get_captcha()
            result = session.post(url, data=data, headers=headers)
            print((json.loads(result.text))['msg'])
            # 保存cookie到本地
        session.cookies.save(ignore_discard=True, ignore_expires=True)
     
     
    def isLogin():
        # 通过查看用户个人信息来判断是否已经登录
        url = "https://www.zhihu.com/settings/profile"
        # 禁止重定向，否则登录失败重定向到首页也是响应200
        login_code = session.get(url, headers=headers, allow_redirects=False).status_code
        if login_code == 200:
            return True
        else:
            return False
     
     
    if __name__ == '__main__':
        if isLogin():
            print('您已经登录')
        else:
            account = input('输入账号：')
            secret = input('输入密码：')
            login(account, secret)


# 解析CSS文件
  # import tinycss
    css_resp = requests.get(url)
    parser = tinycss.make_parser("page3")
    ss = parser.parse_stylesheet(css_resp.text)
    
    for rule in ss.rules:
        print(rule.selector[1].valie, end=": ")
        for d in rule.declarations:
            print(d.name, end=" ")
            for v in d.value:
                if v.value == " ":
                    continue
                print(int(v.value), end="px ")
  
# 日志模板
    import logging

    class ContextFilter(logging.Filter):
        """ 定制用户id """
        def filter(self, record):
            # user_id 可以改成其他名字，后面格式化时对应即可
            record.user_id = '123'
            return True

    # 设置log的名字
    logger = logging.getLogger(__name__)
    # 设置logger对象的log的等级
    logger.setLevel(logging.DEBUG)

    # 实例化流句柄
    log_con = logging.StreamHandler()
    # 设置该流的log等级
    log_con.setLevel(logging.DEBUG)
    # 格式化输出，固定名称写法
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)-8s - %(message)s")
    log_con.setFormatter(formatter)
    # 添加到logger对象
    logger.addHandler(log_con)

    # 实例化文件流句柄
    log_file = logging.FileHandler("file.log")
    # 设置文件流log等级
    log_file.setLevel(logging.INFO)
    # 格式化输出，固定名称写法
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)-8s - %(user_id)s - %(message)s")
    log_file.setFormatter(formatter)
    # 使用ContextFilter类来设置日志输出id
    logger.addFilter(ContextFilter())
    # 添加到logger对象
    logger.addHandler(log_file)

    logger.debug("->> debug level 10")
    logger.info("->> info level 20")
    logger.warning("->> warning level 30")
    logger.error("->> error level 40")
    logger.critical("->> critical level 50")



# 获取md5
    from hashlib import md5

    def get_md5(data):
        if isinstance(data, str):
            data = data.encode('utf-8')
        m = md5()
        m.update(data)
        return m.hexdigest()


    if __name__ == '__main__':
        print(get_md5("Miman and Bunny"))


# 发送邮件
    import smtplib, time
    from email.mime import multipart, text

    def send_email(content='', level=1, retry=5):
        '''
        发送邮件
        :param content: 发送内容
        :param subject: 邮箱主题
        :return: None
        '''

        if not content:
            return 0
        if isinstance(level, (str, )):
            if '-' in level:
                level = 0
            elif len(level) > 1:
                level = 2
            else:
                level = ord(level) - 48
        if isinstance(retry, (str, )):
            if '-' in retry:
                retry = 0
            elif len(retry) > 1:
                retry = 2
            else:
                retry = ord(retry) - 48
        if level < 0:
            level = 0
        elif level > 2:
            level = 2
        subject = ["小红秘书飞奔而来", "小青秘书微笑而来", "小紫秘书悄悄跟您说"][level]
        # SMTP_SERVER = "smtp.qq.com"
        # sender = 'mimanok@foxmail.com'
        # password = "tqegbjvnkcwwecfj"
        # receivers = ['mimanok@qq.com']
        # try:
        #     smtpObj = smtplib.SMTP(local_hostname='localhost', port=25)
        #     smtpObj.connect(SMTP_SERVER, '25')
        #     smtpObj.login(sender, password)
        #     smtpObj.sendmail(sender, receivers, content)
        #     print("->> Successfully sent email")
        # except smtplib.SMTPException:
        #     print("->> unable to send email")
        #     if retry:
        #         retry -= 1
        #         time.sleep(2)
        #         return send_email(content=content, level=level, retry=retry)
        #     else:
        #         return 0

        # 发送邮箱smtp服务器地址
        SMTP_SERVER = "smtp.qq.com"
        # 发送邮箱账户
        sender = "mimanok@foxmail.com"
        password = "tqegbjvnkcwwecfj"
        # 收件人地址
        receivers = "mimanok@qq.com"

        msg = multipart.MIMEMultipart()
        msg['from'] = sender
        msg['to'] = receivers
        msg['subject'] = subject
        txt = text.MIMEText(content)
        msg.attach(txt)

        try:
            smtpObj = smtplib.SMTP(local_hostname='localhost', port=25)
            smtpObj.connect(SMTP_SERVER, '25')
            smtpObj.login(sender, password)
            smtpObj.sendmail(sender, receivers, str(msg))
            print("->> Successfully sent email")
        except smtplib.SMTPException:
            print("->> unable to send email")
            if retry:
                retry -= 1
                time.sleep(2)
                return send_email(content=content, level=level, retry=retry)
            else:
                return 0
        smtpObj.quit()
        return 1

    if __name__ == '__main__':
        send_email(content="陈陈", level=1, retry=3)














