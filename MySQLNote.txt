######## 默认连接端口：3306 ########
######## navicat是mysql的图形辅助工具 ########

-> 设置权用户限
    - 权限有：execute,create,select,insert,update,delete。
    - grant execute,insert,select,update on 库.* to 'root'@'%';
    - grant all on db.* to 'user'@'%';

-> 给root用户设置可远程访问权限
    - GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'pass' WITH GRANT OPTION;
    - flush privileges;

-> 查看用户目前权限：
    - show grants for root;

-> 查看用户资料
    - select * from user where user="root";
    - select Host,User from user where user="root";(查看单个用户)
    - select User,Host from mysql.user;（查看全部用户）

-> 使用哪个库
    - use mysql;

-> mysql 安装成功后创建root密码
    - mysqladmin -u root -p pass;
-> 创建用户：
    - create user 'root'@'%' identified by 'pass';

-> 删除用户：
    - delete from user where user="root" and host="%"
    - drop user username@localhost;

-> 修改Host为%，代表外网可以连接和刷新：
    - update user set Host="%" where user="root"

-> 授权语句：
    - grant all privileges on *.* to 'root'@'%' with grant option;

-> 取消用户查询权限：
    - revoke select on what from 'root';

-> 查询用户密码：
    - select host,user,authentication_string from mysql.user;

-> 修改数据库登录密码：
    - alter user 'root'@'localhost' identified by 'youpassword';
    - alter user "Miman"@"%" identified by "密码" password expire never;
    - alter user "Miman"@"%" identified with mysql_native_password by "密码";

-> 新用户名替换旧用户名：
    - use mysql;
    - update user set user="new" where user="old";

-> 刷新用户权限：
    - flush privileges;

-> 创建库：
    - create database 库名
    - create database 库名 charset utf8;

-> 查看创建的库
    - show create database 库名

-> 删除库：
    - drop database 库名;

-> 查看使用时间格式：
    - show variables like '%time_zone%';

-> 修改时间格式：
    - set global time_zone='+8:00';

-> 查看表结构:
    - describe 表名| desc 表名;

-> 数据去重：
    - select distinct 列…. From 表名;

-> 数据拼接：
    - select concat(列1,列2) from 表名;

-> 模糊查询:
    - select * from movies where name like "科幻%";

-------------------------------------------
    - drop table book;
    - create table movies(id int auto_increment primary key, name varchar(20), url varchar(200));
    - insert into movies(name, url) values("斗罗大陆94集", "https://v.qq.com/x/cover/m441e3rjq9kwpsc/n0033turevc.html");
    - select name,url from movies;
    - select * from movies;
    - select * from movies order by id desc（降序）asc（升序）;
    - select * from ipPool limit 10（数量） offset 5（偏移量）;
    - select name,url from movies;
    - select * from movies where id > 0;
    - delete from movies where id=3;
-> 修改表名
    - rename table name to new_name;
-> 修改表
    - update movies set id=3 where id=4;
    - alter table ipPool change protocal http varchar(5);
    - alter table ipPool change protocal http varchar(5) not null default "http";
    - alter table ipPool add sex enum("男", "女");
    - alter table ipPool drop column;
    - alter table ipPool modify sex enum("男", "女") not null;  -> 修改数据类型
    - alter table ipPool add column https varchar(5) after http;
    - alter table ipPool change port port varchar(5) not null;
    - update ipPool set ID = ID - 3 where ID > 3;
    - select count(*) from ipPool
-> 命令行中：
    - select * from tables \G：竖着显示

-> 查看表创建过程
    - show create table name;

-> 分组查看
    - select port, count(*) from ipPool group by port;
    - select port, count(*) as alias from ipPool group by port;

-> 求和
    - select name, sum(age) as sum_age from student;

-> 分组求和
    - select name, sum(age) as sum_age from student group by name;

-> 分组求和带总和
    - select name, sum(age) as sum_age from student group by name with rollup;
总和设置别名
    - select coalesce(name, 别名), sum(age) as sum_age from student group by name with rollup;

-> 外键关联
    - create table student(id int(11) auto_increment, primary key (id), day int not null, stu_id int(11) not null,
    - key fk_student_key (stu_id), constraint fk_student_key foreign key (stu_id) references student (id));

-> 表A中a列与表B中b列交集
    - 1.select * from A inner join B on A.a=B.b;（常用）
    - 2.select A.*,B.* from A,B where A.a=B.b;

-> 表A中a列与表B中b列差集
    - 1.select * from A left join B on A.a=B.b;
    - 2.select * from A right join B on A.a=B.b;

-> 表A中a列与表B中b列并集
    - select * from A left join B on A.a=B.b union select * from A right join B on A.a=B.b;

-> 事务
    - 开启一个事务：begein；
    - 出现问题回滚：rollback;  -> 回滚后事务结束
    - 提交数据：commit；提交后不可回滚

-> 创建索引
    - 查看表索引：show index from my_table;
    - 创建表索引：create index indexName（类似key_name:primary key） on my_table(user_name(length));  -> user_name：字段名
如果是char和varchar类型，length可以小于字段实际长度， 如果是blob和text类型，必须指定length；
    - 创建唯一索引：create unique index indexName（类似key_name:primary key） on my_table(user_name(length));

#修改表结构
    - alter table my_table add index indexName on (user_name(length));

-> 删除索引
    - drop index indexName on my_table;

-> pycharm中 python3.6.5
    - pycharm中默认开启事务
	- import pymysql
	- conn = pymysql.connect(port="", user="", password="", port=3306, db="", charset="utf8")
	- cur = coon.cursor()
	- cur.execute("命令行中")
	- conn.rollback()
	- conn.commit()
	- conn.close()
















