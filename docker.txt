# Docker基本操作 #

# 安装Docker
    # 1.下载关于Docker的镜像依赖环境
        # Centos中
            # step 1: 安装必要的一些系统工具
            sudo yum install -y yum-utils device-mapper-persistent-data lvm2
            # Step 2: 添加软件源信息
            sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
            # Step 3: 更新并安装 Docker-CE
            sudo yum makecache fast
            sudo yum -y install docker-ce
            # Step 4: 开启Docker服务
            sudo service docker start

            注意：其他注意事项在下面的注释中
            # 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。
            # vim /etc/yum.repos.d/docker-ce.repo
            #   将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1
            #
            # 安装指定版本的Docker-CE:
            # Step 1: 查找Docker-CE的版本:
            # yum list docker-ce.x86_64 --showduplicates | sort -r
            #   Loading mirror speeds from cached hostfile
            #   Loaded plugins: branch, fastestmirror, langpacks
            #   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable
            #   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable
            #   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable
            #   Available Packages
            # Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)
            # sudo yum -y install docker-ce-[VERSION]
            # 注意：在某些版本之后，docker-ce安装出现了其他依赖包，如果安装失败的话请关注错误信息。例如 docker-ce 17.03 之后，需要先安装 docker-ce-selinux。
            # yum list docker-ce-selinux- --showduplicates | sort -r
            # sudo yum -y install docker-ce-selinux-[VERSION]

            # 通过经典网络、VPC网络内网安装时，用以下命令替换Step 2中的命令
            # 经典网络：
            # sudo yum-config-manager --add-repo http://mirrors.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo
            # VPC网络：
            # sudo yum-config-manager --add-repo http://mirrors.could.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo
        
        # Ubuntu中
            # step 1: 安装必要的一些系统工具
            sudo apt-get update
            sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
            # step 2: 安装GPG证书
            curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
            # Step 3: 写入软件源信息
            sudo add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"
            # Step 4: 更新并安装 Docker-CE
            sudo apt-get -y update
            sudo apt-get -y install docker-ce

            注意：其他注意事项在下面的注释中
            # 安装指定版本的Docker-CE:
            # Step 1: 查找Docker-CE的版本:
            # apt-cache madison docker-ce
            #   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages
            #   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages
            # Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)
            # sudo apt-get -y install docker-ce=[VERSION]

            # 通过经典网络、VPC网络内网安装时，用以下命令替换Step 2、Step 3中的命令
            # 经典网络：
            # curl -fsSL http://mirrors.aliyuncs.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
            # sudo add-apt-repository "deb [arch=amd64] http://mirrors.aliyuncs.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"
            # VPC网络：
            # curl -fsSL http://mirrors.cloud.aliyuncs.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
            # sudo add-apt-repository "deb [arch=amd64] http://mirrors.cloud.aliyuncs.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"
            
            # 配置镜像加速器
                针对Docker客户端版本大于 1.10.0 的用户
                您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器
                    sudo mkdir -p /etc/docker
                    sudo tee /etc/docker/daemon.json <<-'EOF'
                    {
                      "registry-mirrors": ["https://ubylzbxo.mirror.aliyuncs.com"]
                    }
                    EOF
                    sudo systemctl daemon-reload
                    sudo systemctl restart docker
            # 解决trying to connect to the Docker daemon socket
                sudo groupadd docker #添加docker用户组
                sudo gpasswd -a $XXX docker #检测当前用户是否已经在docker用户组中，其中XXX为用户名，例如我的，liangll
                sudo gpasswd -a $USER docker #将当前用户添加至docker用户组
                newgrp docker #更新docker用户组
        
    # 2.设置Docker下载镜像源
        阿里云下载：yum-config-manager --add-repo http://mirrors.aliyum.com/docker-ce/linux/centos/docker-ce.repo
        
    # 3.安装Docker
        yum makacahe fast 
        yum -y install docker-ce
        
    # 4.启动，并设置为开机自动启动，测试
        # 启动Docker服务
            systemctl start docker-ce
        # 设置开机自动启动
            systemctl enable docker
        # 测试
            docker run docker-hello

# 拉取镜像到本地
    docker pull 镜像名称[:tag]
    # 栗子
        docker pull daocloud.io/library/tomcat:8.5.15-jre8
            
# 查看全部本地镜像
    docker images

# 删除本地镜像
    docker rmi 

# 镜像的导入导出（不规范）
    # 将本地的镜像导出
        docker save -o 导出路径 镜像id
        或：
        docker save 镜像名>file.tar
    # 加载本地的镜像
        docker load -i file.tar
        # 加载后的镜像文件名称是None，可以手动修改解决
            docker tag 镜像id 新的镜像名称:版本

# 容器的操作
    # 1.运行器
        # 简单操作
            docker run 镜像的标识|镜像的名称[:tag]
        # 常用的参数
            docker run -d -p 宿主机端口:容器端口 --name 容器的名称 镜像的标识|镜像名称[:tag]
            # -d: 代表后台的运行容器
            # -p: 宿主机端口:容器端口；为了映射当前linux端口和容器端口
            # --name: 容器名称
    # 2.查看正在运行的容器
        docker ps [-qa]
            # -a: 查看全部的容器
            # -q: 只查看容器的标识
    # 3.查看容器的日志
        docker logs -f 容器id
            # -f: 可以滚动查看日志的最后几行
    # 4.进入到容器的内部
        docker exec -it 容器id path/bash
        # 退出容器
            exit
    # 5.删除容器（删除容器前，需要先停止容器）
        # 停止指定的容器
            docker stop 容器id
        # 停止全部容器
            docker stop $(docker ps -qa)
        # 删除指定容器
            docker rm 容器id
        # 删除全部容器
            docker rm $(docker ps -qa)
    

# end #

# Docker的中央仓库 #

# 1.Docker的官方中央仓库，这个仓库的镜像的最全的，但是下载速度较慢
    https://hub.docker.com
    
# 2.国内的下载网站：网易蜂巢、daoCloud
    https://c.163yun.com/hub#/home  # 需要登录
    http://hub.daocloud.io/  # 推荐使用
# 3.在公司内部采用私服的方式拉取镜像。（添加配置）
    # 需要在/etc/docker/daemon.json
    {
        "registry-mirrors": ["https://registry.docker-cn.com"],
        "insecure-registreis": ["ip:port"]
    }
    # 重启两个服务
        systemctl daemon-reload
        systemctl restart docker
    
# end #

# Docker应用 #

    # 先停止系统中的tomcat和mysql服务
        # 进入tomcat目录
            cd /usr/local/apache-tomcat-8.5.53/
            cd bin/bash
            ./shutdown.sh
        # 停止mmysql
            systemctl stop mysqld
            systemctl disable mysqld
        # run mysql镜像，如果没有mysql镜像，该命令会先去下载
            docker run -d -p 3306:3306 --nmae mysql -e MYSQL_ROOT_PASSWORD=root daocloud.io/library/mysql:5.7.4
        
        # 登录mysql若遇到/var/run/mysqld/mysqld.sock错误
            # 可以尝试这样连接
                mysql -uroot -h 127.0.0.1 -p
            # 配置
                [mysqld]
                datadir=/usr/local/mysql/data
                basedir=/usr/local/mysql
                socket=/var/lib/mysql/mysql.sock（跟这个socket路径一样）
                user=mysql
                # Disabling symbolic-links is recommended to prevent assorted security risks
                symbolic-links=0

                [mysqld_safe]
                log-error=/var/log/mysqld.log
                pid-file=/var/run/mysqld/mysqld.pid

                [client]
                port=3306
                socket=/var/lib/mysql/mysql.sock

    # 3.1准备SSM工程
        # MySql数据库的连接用户名和密码改变了，修改db.properties
    
    # 3.2准备MySql容器
        # 在daoCloud网站搜索MySql并复制拉取连接
            docker run 拉取连接
        # 运行mysql容器
            docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root daocloud.io/library/mysql:5.7.4
    
    # 3.3准备Tomcat容器
        # 运行Tomcat容器，前面搞定后，只需要将SSM项目的war包部署到Tomcat容器即可
        # 通过命令将宿主机的内容复制到容器内部
            先进入ssm文件将用户名密码修改，再重新打包（war包）：mvn clean package -DskipTests  # 此步骤可以不要
            将打好的war包复制到某个路径并重命名: mv old.war new.war  # 此步骤可以不要
            docker cp 文件名称 容器id:容器内部路径
        # 举个栗子
            docker cp ssm.war fe:/usr/local/tomcat/webapps
    
    # 3.4数据卷
        为了部署SSM的工程，需要使用到cp的命令将宿主机内的ssm.war文件复制到容器内部。
        数据卷：将宿主机的一个目录映射到容器的一个目录中
        可以在宿主机中操作目录中的内容，容器内部映射的文件也会跟着改变
        # 创建数据卷
            docker volume create 数据卷名称
            
        # 创建数据卷之后，默认会存放在一个目录下: /var/lib/docker/volumes/创建时指定的数据卷名称/_data
        
        # 查看数据卷的详细信息
            docker volume inspect 数据卷名称
        
        # 查看全部数据卷
            docker volume ls
            
        # 删除数据卷
            docker volume rm 数据卷名称
            
        # 应用数据卷
            # 当你映射数据卷时，如果数据卷不存在，Docker会帮你自动创建
                docker run -v 数据卷名称:容器内部的路径 镜像id
            # 直接指定一个路径作为数据卷的存放位置
                docker run -v 路径:容器内部的路径 镜像id
                
            # 栗子步骤
                # 映射数据卷，会将容器内部自带的文件，存储在默认的存放路径中
                    # 停掉之前的tomcat
                        docker ps  # 查看当前运行的容器，有需要停掉的容器就进行下面步骤
                        docker stop 容器id
                        docker rm 容器id
                    # 查看容器id
                        docker ps -a
                    # 创建数据卷
                        docker volume create volume_ssm_tomcat
                    # 启动
                        docker run -d -p 8080:8080 --name ssm_tomcat -v volumes_ssm_tomcat:/usr/local/tomcat/用户应用(webapps)(被映射的目录) 容器id
                    # 如果想把war包部署到卷中
                        就将war包复制到/var/lib/docker/volumes/卷名/_data
                    # 查看日志
                        docker logs -f 容器id  # 最后一行[可以看到已经将ssm包加载进来了]
                # 指定一个路径作为数据卷的存放位置用户应用(webapps)(被映射的目录) 容器
                    # docker run -d -p 8080:8080 --name ssm_tomcat -v /opt/volume_ssm_tomcat(指定的绝对路径):/usr/local/tomcat/用户应用(webapps)(被映射的目录) 容器id
                    # cd /opt/ ls会发现该目录下多了一个volume_ssm_tomcat目录
                    # 此时volume_ssm_tomcat目录为空，需要手动添加文件（建议使用）
                    
    # 4.Docker自定义镜像
    
        # 指令
            # COPY和ADD
                COPY:从文件系统复制内容
                ADD :不仅可以从文件系统，还可以从某个url复制
            # CMD和ENTRYPOINT
                RNTRYPOINT非json则以RNTRYPOINT为准，如果RNTRYPOINT和CMD都是json则
                RNTRYPOINT+CMD拼接成shell
            # EXPOSE:当前的镜像暴露出来的端口
                # docker inspect 镜像名称  # 查看镜像信息
                    # 在config下的ExposePorts下记录了暴露的端口
            # ENV:定义环境变量，从构建到容器退出都生效
                ENV A=10
                CMD echo $A  # 运行镜像是将会打印出10
            # ARG:定义环境变量，构建时生效
                # 可在构建时临时修改
                    docker build -t test --build-arg A=12
            # LABEL:标识，没有实质作用,一般放在第二行
                LABEL k="v" k1="v1"
            # ONBUILD
                ONBUILD ENV C=100 # 另一个文件以FROM形式导入后生效
    
        # 创建一个Dockerfile文件（文件是没有任何后缀的），并且指定自定义镜像信息
            # Dockerfile文件中常用的内容
                from：指定当前自定义镜像依赖的环境，例：daocloud.io/library/tomcat:8.5.15-jre8
                copy：将相对路径（和DockerFile文件同级目录）下的内容复制到自定义镜像中
                workdir：声明镜像的默认工作路径
                cmd：需要执行的命令（在workdir下执行的，cmd可以写多的，只以最后一个为准）
            # 举个栗子
                from daocloud.io/library/tomcat:8.5.15-jre8
                copy ssm.war /usr/local/tomcat/webapps
            # 将准备好的Dockerfile和相应的文件拖拽到linux操作系统中，通过Docker命令制作镜像
                docker build -t 镜像名称:[tag]
                # 举个栗子
                    先在~下创建个ssm-tomcat文件用来区分
                    cd ssm-tomcat
                    docker build -t ssm-tomcat:1.0.0 .
                    docker images
                    docker run -d -p 8081:8080 --name custom-ssm-tomcat 容器id
                # 缓存特性
                    当构建到某一步失败（可进入上层容器中查看原因：docker run -it id），之后再进行构建时，会自动从失败的地方继续。
                
    # 5.Docker-Compose
        之前运行一个镜像，需要添加大量的参数
        可以通过Docker-Compose编写这些参数
        Docker-Compose可以帮助我们批量的管理容器
        只需要通过一个docker-compose.yml文件去维护即可
        
        # 下载Docker-Compose
            # 去GitHub官网搜索docker-compose，下载1.24.1版本的Docker-Compose
                连接地址：https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64
            # 将下载好的文件拖拽到Linux系统中
                ~# mv docker-compose-Linux-x86_64 /usr/local
                cd /usr/local
                mv docker-compose-Linux-x86_64 docker-compose
                # 添加可执行权限
                    chmod 777 docker-compose
                mv docker-compose bin
                cd bin/
                pwd 复制路径
                # 修改环境变量
                    vim /etc/profile
                        在最后面将路径添加到export PATH=后面
                # 重新加载环境变量
                    source /etc/profile
                # 测试docker-compose是否加载成功
                    cd ~
                    docker-compose
    # 6.Docker-Compose管理MySql和Tomcat容器
        yml文件以key: value方式来指定配置信息
        多个配置信息以换行+缩进的方式来区分
        在docker-compose.yml文件中，不要使用制表符
        下发如下：
            version: '3.1'
            services:
              mysql:  # 服务器的名称
                restart: always  # 代表只要docker启动，那么这个容器就跟着一起启动
                image: download.io/library/mysql:5.7.4  # 指定镜像路径（拉取地址）
                container_name: mysql  # 指定容器名称
                ports:
                  - 3306:3306  # 指定端口号的映射
                environment:
                    MYSQL_ROOT_PASSWORD: root  # 指定MySql的root用户登录密码
                    TZ: Asia/SiChuan  # 指定时区
                volumes:
                  - opt/docker_mysql_tomcat/mysql_data:var/lib/mysql  # 映射数据卷
              tomcat:  # 服务器的名称(同上)
                restart: always
                image: download.io/library/tomcat:8.5.15-jre8
                container_name: tomcat
                ports:
                  - 8080:8080
                environment:
                    TZ: Asia/Sichuan
                volumes:
                  - opt/docker_mysql_tomcat/tomcat_webapps:/usr/local/tomcat/webapps
                  - opt/docker_mysql_tomcat/tomcat_logs:/usr/local/tomcat/logs
        
        # 使用docker-compose命令管理容器
            在使用docker-compose的命令时，默认会在当前目录下找到docker-compose.yml文件
            # 基于docker-copmose.yml启动管理容器
                docker-compose up -d
            # 关闭并删除容器
                docker-compose down
            # 开启|关闭|重启已经存在的由docker-compose维护的容器
                docker-compose start|stop|restart
            # 查看有docker-compose管理的容器
                docker-compose ps
            # 查看日志
                docker-compose logs -f
                
        # docker-compose配置Dockerfile使用
            使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器
            # docker-compose.yml文件内容:
                version: '3.1'
                services:
                  ssm:
                    restart: always
                    build:  # 构建自定义镜像
                      context: ../  指定dockerfile文件的所在路径
                      dockerfile: Dockerfile  # 指定Dockerfile文件名称
                    image: ssm:1.0.1
                    container_name: ssm
                    ports:
                      - 8081:8080
                    environment:
                      TZ: Asia/Sichuan
            # Dockerfile文件内容：
                from daocloud.io/library/tomcat:8.5.15-jre8
                copy ssm.war /usr/local/tomcat/webapps
                
            # 上面两个文件准备好后，要注意docker-compose.yml文件在Dockerfile文件下一级
                创建一个docker_ssm文件夹打开
                创建一个docker-compose文件夹，并在其中放入docker-compose.yml文件
                将ssm.war、Dockerfile复制到docker-compose文件夹中
                将docker_ssm文件sftp传到linux中
                
                将docker_ssm文件剪切到 opt文件夹中
                    mv docker_ssm /opt/
                    cd opt
                    cd docker_ssm/
                    cd docker-compose
                    docker-compose up -d
            # 可以直接启动基于docker-compose.yml以及Dockerfile文件构建自定义镜像
                docker-compose up -d
                # 如果自定义镜像不存在，会帮助我们构建出自定义镜像，如果自定义镜像已经存在，会直接运行这个自定义镜像
                # 重新构建的话
                # 重新构建自定义镜像
                    docker-compose build
                # 运行前，重新构建
                    docker-compose up -d --build
# end #

# 镜像文件修改后不会保存，要想保存修改必须自己打包

# 启动最近的Ubuntu并运行home/usr/hello-word镜像
  # docker run ubuntu:latest /home/usr/hello-word
  
# 下载python3.6镜像
  # docker pull python:3.6

# 运行redis并为其ID取名为redis1
  # docker --name redis1 redis
 
# 运行redis并为其ID取名为redis1,退出时自动删除容器
  # docker --rm --name redis1 redis
  
# 运行redis,为其ID取名为redis2,并将本机/data/redis目录映射到redis容器中的/data目录
  # docker --name redis2 -v /data/redis:/data redis
  
# 查看当前运行容器
  # docker ps
  
# 查看所有容器
  # docker ps -a
  
# 查看容器IP地址
  # docker inspect ID(或者--name 后面起的名字)
  
# 查询一个只有几兆的linux系统
  # docker search alphine
  
# 删除容器
  # docker rm 容器ID

# 找到docker的所有CONTAINER并将其删除
  # docker ps -a | grep -v CONTAINER | cut -d ' ' -f1 | xargs docker rm
  
# 从新的窗口进入到已经启动的docker容器中
  # docker exec -it name或ID /bin/hash
  
# 打包
  # docker commit -m 'installed django' ID号 别名:版本
  # 再运行
    # docker run -it --rm 别名:版本 /bin/bash
    
# 创建自己的镜像，其实就像pip -r requirement.txt一样，简化了一些频繁安装操作
  # 首先vim 一个dockerfile文件
  # 写入
    # FROM 一个基准镜像比如python_django:3.6
      # 如果没有这个镜像，就会自动从云端下载
    # RUN pip install ...
      # 具体要执行的命令
    # 运行自己创建的镜像
      # docker build -t python_django:3.6
      
# 终端模式登陆docker
  # docker login

# 给镜像重新命名
  # docker tag old_name new_name
  
# docker 镜像上传与下载
  # docker push 1350/miman_1:tagname
  # docker网址: https://hub.docker.com
  # docker push image_name
   # 不会推所有的，有些底层的不会推，只会推上层我们的




















